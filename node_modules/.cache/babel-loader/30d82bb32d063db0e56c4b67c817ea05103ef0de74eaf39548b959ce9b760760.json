{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EventCommonSender = exports.EventCommon = exports.EventBuilder = void 0;\nexports._intoIdSet = _intoIdSet;\nconst tl_1 = require(\"../tl\");\nconst custom_1 = require(\"../tl/custom\");\nconst Helpers_1 = require(\"../Helpers\");\nconst __1 = require(\"../\");\nconst senderGetter_1 = require(\"../tl/custom/senderGetter\");\nconst big_integer_1 = __importDefault(require(\"big-integer\"));\nconst Utils_1 = require(\"../Utils\");\n/** @hidden */\nasync function _intoIdSet(client, chats) {\n  if (chats == undefined) {\n    return undefined;\n  }\n  if (!(0, Helpers_1.isArrayLike)(chats)) {\n    chats = [chats];\n  }\n  const result = new Set();\n  for (let chat of chats) {\n    if (typeof chat == \"number\" || typeof chat == \"bigint\" || typeof chat == \"string\" && (0, Utils_1.parseID)(chat) || big_integer_1.default.isInstance(chat)) {\n      chat = (0, Helpers_1.returnBigInt)(chat);\n      if (chat.lesser(0)) {\n        result.add(chat.toString());\n      } else {\n        result.add(__1.utils.getPeerId(new tl_1.Api.PeerUser({\n          userId: chat\n        })));\n        result.add(__1.utils.getPeerId(new tl_1.Api.PeerChat({\n          chatId: chat\n        })));\n        result.add(__1.utils.getPeerId(new tl_1.Api.PeerChannel({\n          channelId: chat\n        })));\n      }\n    } else if (typeof chat == \"object\" && chat.SUBCLASS_OF_ID == 0x2d45687) {\n      result.add(__1.utils.getPeerId(chat));\n    } else {\n      chat = await client.getInputEntity(chat);\n      if (chat instanceof tl_1.Api.InputPeerSelf) {\n        chat = await client.getMe(true);\n      }\n      result.add(__1.utils.getPeerId(chat));\n    }\n  }\n  return Array.from(result);\n}\n/**\n * The common event builder, with builtin support to filter per chat.<br/>\n * All events inherit this.\n */\nclass EventBuilder {\n  constructor(eventParams) {\n    var _a;\n    this.chats = (_a = eventParams.chats) === null || _a === void 0 ? void 0 : _a.map(x => x.toString());\n    this.blacklistChats = eventParams.blacklistChats || false;\n    this.resolved = false;\n    this.func = eventParams.func;\n  }\n  build(update, callback, selfId) {\n    if (update) return update;\n  }\n  async resolve(client) {\n    if (this.resolved) {\n      return;\n    }\n    await this._resolve(client);\n    this.resolved = true;\n  }\n  async _resolve(client) {\n    this.chats = await _intoIdSet(client, this.chats);\n  }\n  filter(event) {\n    if (!this.resolved) {\n      return;\n    }\n    if (this.chats != undefined) {\n      if (event.chatId == undefined) {\n        return;\n      }\n      const inside = this.chats.includes(event.chatId.toString());\n      if (inside == this.blacklistChats) {\n        // If this chat matches but it's a blacklist ignore.\n        // If it doesn't match but it's a whitelist ignore.\n        return;\n      }\n    }\n    if (this.func && !this.func(event)) {\n      return;\n    }\n    return event;\n  }\n}\nexports.EventBuilder = EventBuilder;\nclass EventCommon extends custom_1.ChatGetter {\n  constructor({\n    chatPeer = undefined,\n    msgId = undefined,\n    broadcast = undefined\n  }) {\n    super();\n    this._eventName = \"Event\";\n    custom_1.ChatGetter.initChatClass(this, {\n      chatPeer,\n      broadcast\n    });\n    this._entities = new Map();\n    this._client = undefined;\n    this._messageId = msgId;\n  }\n  _setClient(client) {\n    this._client = client;\n  }\n  get client() {\n    return this._client;\n  }\n}\nexports.EventCommon = EventCommon;\nclass EventCommonSender extends senderGetter_1.SenderGetter {\n  constructor({\n    chatPeer = undefined,\n    msgId = undefined,\n    broadcast = undefined\n  }) {\n    super();\n    this._eventName = \"Event\";\n    custom_1.ChatGetter.initChatClass(this, {\n      chatPeer,\n      broadcast\n    });\n    senderGetter_1.SenderGetter.initChatClass(this, {\n      chatPeer,\n      broadcast\n    });\n    this._entities = new Map();\n    this._client = undefined;\n    this._messageId = msgId;\n  }\n  _setClient(client) {\n    this._client = client;\n  }\n  get client() {\n    return this._client;\n  }\n}\nexports.EventCommonSender = EventCommonSender;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}