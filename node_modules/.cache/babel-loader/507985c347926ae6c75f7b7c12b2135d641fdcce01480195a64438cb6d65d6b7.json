{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.patchAll = patchAll;\nconst api_1 = require(\"../api\");\nconst message_1 = require(\"../custom/message\");\nfunction getGetter(obj, prop) {\n  while (obj) {\n    let getter = Object.getOwnPropertyDescriptor(obj, prop);\n    if (getter && getter.get) {\n      return getter.get;\n    }\n    obj = Object.getPrototypeOf(obj);\n  }\n}\nfunction getSetter(obj, prop) {\n  while (obj) {\n    let getter = Object.getOwnPropertyDescriptor(obj, prop);\n    if (getter && getter.set) {\n      return getter.set;\n    }\n    obj = Object.getPrototypeOf(obj);\n  }\n}\nconst getInstanceMethods = obj => {\n  let keys = {\n    methods: new Set(),\n    setters: new Set(),\n    getters: new Set()\n  };\n  let topObject = obj;\n  const mapAllMethods = property => {\n    const getter = getGetter(topObject, property);\n    const setter = getSetter(topObject, property);\n    if (getter) {\n      keys[\"getters\"].add(property);\n    } else if (setter) {\n      keys[\"setters\"].add(property);\n    } else {\n      if (!(property == \"constructor\")) {\n        keys[\"methods\"].add(property);\n      }\n    }\n  };\n  do {\n    Object.getOwnPropertyNames(obj).map(mapAllMethods);\n    // walk-up the prototype chain\n    obj = Object.getPrototypeOf(obj);\n  } while (\n  // not the the Object prototype methods (hasOwnProperty, etc...)\n  obj && Object.getPrototypeOf(obj));\n  return keys;\n};\nfunction patchClass(clazz) {\n  const {\n    getters,\n    setters,\n    methods\n  } = getInstanceMethods(message_1.CustomMessage.prototype);\n  for (const getter of getters) {\n    Object.defineProperty(clazz.prototype, getter, {\n      get: getGetter(message_1.CustomMessage.prototype, getter)\n    });\n  }\n  for (const setter of setters) {\n    Object.defineProperty(clazz.prototype, setter, {\n      set: getSetter(message_1.CustomMessage.prototype, setter)\n    });\n  }\n  for (const method of methods) {\n    clazz.prototype[method] = message_1.CustomMessage.prototype[method];\n  }\n}\nfunction patchAll() {\n  patchClass(api_1.Api.Message);\n  patchClass(api_1.Api.MessageService);\n  patchClass(api_1.Api.MessageEmpty);\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}