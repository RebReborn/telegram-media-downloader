{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TimedOutError = exports.ServerError = exports.FloodError = exports.AuthKeyError = exports.NotFoundError = exports.ForbiddenError = exports.UnauthorizedError = exports.BadRequestError = exports.InvalidDCError = exports.RPCError = void 0;\nconst ts_custom_error_1 = require(\"ts-custom-error\");\nclass RPCError extends ts_custom_error_1.CustomError {\n  constructor(message, request, code) {\n    super(\"{0}: {1}{2}\".replace(\"{0}\", (code === null || code === void 0 ? void 0 : code.toString()) || \"\").replace(\"{1}\", message || \"\").replace(\"{2}\", RPCError._fmtRequest(request)));\n    this.code = code;\n    this.errorMessage = message;\n  }\n  static _fmtRequest(request) {\n    // TODO fix this\n    if (request) {\n      return ` (caused by ${request.className})`;\n    } else {\n      return \"\";\n    }\n  }\n}\nexports.RPCError = RPCError;\n/**\n * The request must be repeated, but directed to a different data center.\n */\nclass InvalidDCError extends RPCError {\n  constructor(message, request, code) {\n    super(message, request, code);\n    this.code = code || 303;\n    this.errorMessage = message || \"ERROR_SEE_OTHER\";\n  }\n}\nexports.InvalidDCError = InvalidDCError;\n/**\n * The query contains errors. In the event that a request was created\n * using a form and contains user generated data, the user should be\n * notified that the data must be corrected before the query is repeated.\n */\nclass BadRequestError extends RPCError {\n  constructor() {\n    super(...arguments);\n    this.code = 400;\n    this.errorMessage = \"BAD_REQUEST\";\n  }\n}\nexports.BadRequestError = BadRequestError;\n/**\n * There was an unauthorized attempt to use functionality available only\n * to authorized users.\n */\nclass UnauthorizedError extends RPCError {\n  constructor() {\n    super(...arguments);\n    this.code = 401;\n    this.errorMessage = \"UNAUTHORIZED\";\n  }\n}\nexports.UnauthorizedError = UnauthorizedError;\n/**\n * Privacy violation. For example, an attempt to write a message to\n * someone who has blacklisted the current user.\n */\nclass ForbiddenError extends RPCError {\n  constructor() {\n    super(...arguments);\n    this.code = 403;\n    this.errorMessage = \"FORBIDDEN\";\n  }\n}\nexports.ForbiddenError = ForbiddenError;\n/**\n * An attempt to invoke a non-existent object, such as a method.\n */\nclass NotFoundError extends RPCError {\n  constructor() {\n    super(...arguments);\n    this.code = 404;\n    this.errorMessage = \"NOT_FOUND\";\n  }\n}\nexports.NotFoundError = NotFoundError;\n/**\n * Errors related to invalid authorization key, like\n * AUTH_KEY_DUPLICATED which can cause the connection to fail.\n */\nclass AuthKeyError extends RPCError {\n  constructor() {\n    super(...arguments);\n    this.code = 406;\n    this.errorMessage = \"AUTH_KEY\";\n  }\n}\nexports.AuthKeyError = AuthKeyError;\n/**\n * The maximum allowed number of attempts to invoke the given method\n * with the given input parameters has been exceeded. For example, in an\n * attempt to request a large number of text messages (SMS) for the same\n * phone number.\n */\nclass FloodError extends RPCError {\n  constructor() {\n    super(...arguments);\n    this.code = 420;\n    this.errorMessage = \"FLOOD\";\n  }\n}\nexports.FloodError = FloodError;\n/**\n * An internal server error occurred while a request was being processed\n * for example, there was a disruption while accessing a database or file\n * storage\n */\nclass ServerError extends RPCError {\n  constructor() {\n    super(...arguments);\n    this.code = 500; // Also witnessed as -500\n    this.errorMessage = \"INTERNAL\";\n  }\n}\nexports.ServerError = ServerError;\n/**\n * Clicking the inline buttons of bots that never (or take to long to)\n * call ``answerCallbackQuery`` will result in this \"special\" RPCError.\n */\nclass TimedOutError extends RPCError {\n  constructor() {\n    super(...arguments);\n    this.code = 503; // Only witnessed as -503\n    this.errorMessage = \"Timeout\";\n  }\n}\nexports.TimedOutError = TimedOutError;","map":{"version":3,"names":["Object","defineProperty","exports","value","TimedOutError","ServerError","FloodError","AuthKeyError","NotFoundError","ForbiddenError","UnauthorizedError","BadRequestError","InvalidDCError","RPCError","ts_custom_error_1","require","CustomError","constructor","message","request","code","replace","toString","_fmtRequest","errorMessage","className","arguments"],"sources":["C:/Users/Rodrick/Documents/telegram-media-downloader/node_modules/telegram/errors/RPCBaseErrors.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TimedOutError = exports.ServerError = exports.FloodError = exports.AuthKeyError = exports.NotFoundError = exports.ForbiddenError = exports.UnauthorizedError = exports.BadRequestError = exports.InvalidDCError = exports.RPCError = void 0;\nconst ts_custom_error_1 = require(\"ts-custom-error\");\nclass RPCError extends ts_custom_error_1.CustomError {\n    constructor(message, request, code) {\n        super(\"{0}: {1}{2}\"\n            .replace(\"{0}\", (code === null || code === void 0 ? void 0 : code.toString()) || \"\")\n            .replace(\"{1}\", message || \"\")\n            .replace(\"{2}\", RPCError._fmtRequest(request)));\n        this.code = code;\n        this.errorMessage = message;\n    }\n    static _fmtRequest(request) {\n        // TODO fix this\n        if (request) {\n            return ` (caused by ${request.className})`;\n        }\n        else {\n            return \"\";\n        }\n    }\n}\nexports.RPCError = RPCError;\n/**\n * The request must be repeated, but directed to a different data center.\n */\nclass InvalidDCError extends RPCError {\n    constructor(message, request, code) {\n        super(message, request, code);\n        this.code = code || 303;\n        this.errorMessage = message || \"ERROR_SEE_OTHER\";\n    }\n}\nexports.InvalidDCError = InvalidDCError;\n/**\n * The query contains errors. In the event that a request was created\n * using a form and contains user generated data, the user should be\n * notified that the data must be corrected before the query is repeated.\n */\nclass BadRequestError extends RPCError {\n    constructor() {\n        super(...arguments);\n        this.code = 400;\n        this.errorMessage = \"BAD_REQUEST\";\n    }\n}\nexports.BadRequestError = BadRequestError;\n/**\n * There was an unauthorized attempt to use functionality available only\n * to authorized users.\n */\nclass UnauthorizedError extends RPCError {\n    constructor() {\n        super(...arguments);\n        this.code = 401;\n        this.errorMessage = \"UNAUTHORIZED\";\n    }\n}\nexports.UnauthorizedError = UnauthorizedError;\n/**\n * Privacy violation. For example, an attempt to write a message to\n * someone who has blacklisted the current user.\n */\nclass ForbiddenError extends RPCError {\n    constructor() {\n        super(...arguments);\n        this.code = 403;\n        this.errorMessage = \"FORBIDDEN\";\n    }\n}\nexports.ForbiddenError = ForbiddenError;\n/**\n * An attempt to invoke a non-existent object, such as a method.\n */\nclass NotFoundError extends RPCError {\n    constructor() {\n        super(...arguments);\n        this.code = 404;\n        this.errorMessage = \"NOT_FOUND\";\n    }\n}\nexports.NotFoundError = NotFoundError;\n/**\n * Errors related to invalid authorization key, like\n * AUTH_KEY_DUPLICATED which can cause the connection to fail.\n */\nclass AuthKeyError extends RPCError {\n    constructor() {\n        super(...arguments);\n        this.code = 406;\n        this.errorMessage = \"AUTH_KEY\";\n    }\n}\nexports.AuthKeyError = AuthKeyError;\n/**\n * The maximum allowed number of attempts to invoke the given method\n * with the given input parameters has been exceeded. For example, in an\n * attempt to request a large number of text messages (SMS) for the same\n * phone number.\n */\nclass FloodError extends RPCError {\n    constructor() {\n        super(...arguments);\n        this.code = 420;\n        this.errorMessage = \"FLOOD\";\n    }\n}\nexports.FloodError = FloodError;\n/**\n * An internal server error occurred while a request was being processed\n * for example, there was a disruption while accessing a database or file\n * storage\n */\nclass ServerError extends RPCError {\n    constructor() {\n        super(...arguments);\n        this.code = 500; // Also witnessed as -500\n        this.errorMessage = \"INTERNAL\";\n    }\n}\nexports.ServerError = ServerError;\n/**\n * Clicking the inline buttons of bots that never (or take to long to)\n * call ``answerCallbackQuery`` will result in this \"special\" RPCError.\n */\nclass TimedOutError extends RPCError {\n    constructor() {\n        super(...arguments);\n        this.code = 503; // Only witnessed as -503\n        this.errorMessage = \"Timeout\";\n    }\n}\nexports.TimedOutError = TimedOutError;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}