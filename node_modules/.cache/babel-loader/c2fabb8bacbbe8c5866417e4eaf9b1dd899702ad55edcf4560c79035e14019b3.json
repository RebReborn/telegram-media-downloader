{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MessageButton = void 0;\nconst api_1 = require(\"../api\");\nconst button_1 = require(\"./button\");\nconst Helpers_1 = require(\"../../Helpers\");\nconst Password_1 = require(\"../../Password\");\nconst inspect_1 = require(\"../../inspect\");\nclass MessageButton {\n  [inspect_1.inspect.custom]() {\n    return (0, Helpers_1.betterConsoleLog)(this);\n  }\n  constructor(client, original, chat, bot, msgId) {\n    this.button = original;\n    this._bot = bot;\n    this._chat = chat;\n    this._msgId = msgId;\n    this._client = client;\n  }\n  get client() {\n    return this._client;\n  }\n  get text() {\n    return !(this.button instanceof button_1.Button) ? this.button.text : \"\";\n  }\n  get data() {\n    if (this.button instanceof api_1.Api.KeyboardButtonCallback) {\n      return this.button.data;\n    }\n  }\n  get inlineQuery() {\n    if (this.button instanceof api_1.Api.KeyboardButtonSwitchInline) {\n      return this.button.query;\n    }\n  }\n  get url() {\n    if (this.button instanceof api_1.Api.KeyboardButtonUrl) {\n      return this.button.url;\n    }\n  }\n  /**\n   * Emulates the behaviour of clicking this button.\n    If it's a normal `KeyboardButton` with text, a message will be\n   sent, and the sent `Message <Message>` returned.\n    If it's an inline `KeyboardButtonCallback` with text and data,\n   it will be \"clicked\" and the `BotCallbackAnswer` returned.\n    If it's an inline `KeyboardButtonSwitchInline` button, the\n   `StartBot` will be invoked and the resulting updates\n   returned.\n    If it's a `KeyboardButtonUrl`, the URL of the button will\n   be returned.\n    If it's a `KeyboardButtonRequestPhone`, you must indicate that you\n   want to ``sharePhone=True`` in order to share it. Sharing it is not a\n   default because it is a privacy concern and could happen accidentally.\n    You may also use ``sharePhone=phone`` to share a specific number, in\n   which case either `str` or `InputMediaContact` should be used.\n    If it's a `KeyboardButtonRequestGeoLocation`, you must pass a\n   tuple in ``shareGeo=[longitude, latitude]``. Note that Telegram seems\n   to have some heuristics to determine impossible locations, so changing\n   this value a lot quickly may not work as expected. You may also pass a\n   `InputGeoPoint` if you find the order confusing.\n   */\n  async click({\n    sharePhone = false,\n    shareGeo = [0, 0],\n    password\n  }) {\n    if (this.button instanceof api_1.Api.KeyboardButton) {\n      return this._client.sendMessage(this._chat, {\n        message: this.button.text,\n        parseMode: undefined\n      });\n    } else if (this.button instanceof api_1.Api.KeyboardButtonCallback) {\n      let encryptedPassword;\n      if (password != undefined) {\n        const pwd = await this.client.invoke(new api_1.Api.account.GetPassword());\n        encryptedPassword = await (0, Password_1.computeCheck)(pwd, password);\n      }\n      const request = new api_1.Api.messages.GetBotCallbackAnswer({\n        peer: this._chat,\n        msgId: this._msgId,\n        data: this.button.data,\n        password: encryptedPassword\n      });\n      try {\n        return await this._client.invoke(request);\n      } catch (e) {\n        if (e.errorMessage == \"BOT_RESPONSE_TIMEOUT\") {\n          return null;\n        }\n        throw e;\n      }\n    } else if (this.button instanceof api_1.Api.KeyboardButtonSwitchInline) {\n      return this._client.invoke(new api_1.Api.messages.StartBot({\n        bot: this._bot,\n        peer: this._chat,\n        startParam: this.button.query\n      }));\n    } else if (this.button instanceof api_1.Api.KeyboardButtonUrl) {\n      return this.button.url;\n    } else if (this.button instanceof api_1.Api.KeyboardButtonGame) {\n      const request = new api_1.Api.messages.GetBotCallbackAnswer({\n        peer: this._chat,\n        msgId: this._msgId,\n        game: true\n      });\n      try {\n        return await this._client.invoke(request);\n      } catch (e) {\n        if (e.errorMessage == \"BOT_RESPONSE_TIMEOUT\") {\n          return null;\n        }\n        throw e;\n      }\n    } else if (this.button instanceof api_1.Api.KeyboardButtonRequestPhone) {\n      if (!sharePhone) {\n        throw new Error(\"cannot click on phone buttons unless sharePhone=true\");\n      }\n      if (sharePhone == true || typeof sharePhone == \"string\") {\n        const me = await this._client.getMe();\n        sharePhone = new api_1.Api.InputMediaContact({\n          phoneNumber: (sharePhone == true ? me.phone : sharePhone) || \"\",\n          firstName: me.firstName || \"\",\n          lastName: me.lastName || \"\",\n          vcard: \"\"\n        });\n      }\n      throw new Error(\"Not supported for now\");\n      // TODO\n      //return this._client.sendFile(this._chat, phoneMedia);\n    } else if (this.button instanceof api_1.Api.InputWebFileGeoPointLocation) {\n      if (!shareGeo) {\n        throw new Error(\"cannot click on geo buttons unless shareGeo=[longitude, latitude]\");\n      }\n      throw new Error(\"Not supported for now\");\n      // TODO\n      //return this._client.sendFile(this._chat, geoMedia);\n    }\n  }\n}\nexports.MessageButton = MessageButton;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}