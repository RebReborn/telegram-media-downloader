{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectionTCPAbridged = exports.AbridgedPacketCodec = void 0;\nconst Helpers_1 = require(\"../../Helpers\");\nconst Connection_1 = require(\"./Connection\");\nconst big_integer_1 = __importDefault(require(\"big-integer\"));\nclass AbridgedPacketCodec extends Connection_1.PacketCodec {\n  constructor(props) {\n    super(props);\n    this.tag = AbridgedPacketCodec.tag;\n    this.obfuscateTag = AbridgedPacketCodec.obfuscateTag;\n  }\n  encodePacket(data) {\n    let length = data.length >> 2;\n    let temp;\n    if (length < 127) {\n      const b = Buffer.alloc(1);\n      b.writeUInt8(length, 0);\n      temp = b;\n    } else {\n      temp = Buffer.concat([Buffer.from(\"7f\", \"hex\"), (0, Helpers_1.readBufferFromBigInt)((0, big_integer_1.default)(length), 3)]);\n    }\n    return Buffer.concat([temp, data]);\n  }\n  async readPacket(reader) {\n    const readData = await reader.read(1);\n    let length = readData[0];\n    if (length >= 127) {\n      length = Buffer.concat([await reader.read(3), Buffer.alloc(1)]).readInt32LE(0);\n    }\n    return reader.read(length << 2);\n  }\n}\nexports.AbridgedPacketCodec = AbridgedPacketCodec;\nAbridgedPacketCodec.tag = Buffer.from(\"ef\", \"hex\");\nAbridgedPacketCodec.obfuscateTag = Buffer.from(\"efefefef\", \"hex\");\n/**\n * This is the mode with the lowest overhead, as it will\n * only require 1 byte if the packet length is less than\n * 508 bytes (127 << 2, which is very common).\n */\nclass ConnectionTCPAbridged extends Connection_1.Connection {\n  constructor() {\n    super(...arguments);\n    this.PacketCodecClass = AbridgedPacketCodec;\n  }\n}\nexports.ConnectionTCPAbridged = ConnectionTCPAbridged;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","ConnectionTCPAbridged","AbridgedPacketCodec","Helpers_1","require","Connection_1","big_integer_1","PacketCodec","constructor","props","tag","obfuscateTag","encodePacket","data","length","temp","b","Buffer","alloc","writeUInt8","concat","from","readBufferFromBigInt","default","readPacket","reader","readData","read","readInt32LE","Connection","arguments","PacketCodecClass"],"sources":["C:/Users/Rodrick/Documents/telegram-media-downloader/node_modules/telegram/network/connection/TCPAbridged.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConnectionTCPAbridged = exports.AbridgedPacketCodec = void 0;\nconst Helpers_1 = require(\"../../Helpers\");\nconst Connection_1 = require(\"./Connection\");\nconst big_integer_1 = __importDefault(require(\"big-integer\"));\nclass AbridgedPacketCodec extends Connection_1.PacketCodec {\n    constructor(props) {\n        super(props);\n        this.tag = AbridgedPacketCodec.tag;\n        this.obfuscateTag = AbridgedPacketCodec.obfuscateTag;\n    }\n    encodePacket(data) {\n        let length = data.length >> 2;\n        let temp;\n        if (length < 127) {\n            const b = Buffer.alloc(1);\n            b.writeUInt8(length, 0);\n            temp = b;\n        }\n        else {\n            temp = Buffer.concat([\n                Buffer.from(\"7f\", \"hex\"),\n                (0, Helpers_1.readBufferFromBigInt)((0, big_integer_1.default)(length), 3),\n            ]);\n        }\n        return Buffer.concat([temp, data]);\n    }\n    async readPacket(reader) {\n        const readData = await reader.read(1);\n        let length = readData[0];\n        if (length >= 127) {\n            length = Buffer.concat([\n                await reader.read(3),\n                Buffer.alloc(1),\n            ]).readInt32LE(0);\n        }\n        return reader.read(length << 2);\n    }\n}\nexports.AbridgedPacketCodec = AbridgedPacketCodec;\nAbridgedPacketCodec.tag = Buffer.from(\"ef\", \"hex\");\nAbridgedPacketCodec.obfuscateTag = Buffer.from(\"efefefef\", \"hex\");\n/**\n * This is the mode with the lowest overhead, as it will\n * only require 1 byte if the packet length is less than\n * 508 bytes (127 << 2, which is very common).\n */\nclass ConnectionTCPAbridged extends Connection_1.Connection {\n    constructor() {\n        super(...arguments);\n        this.PacketCodecClass = AbridgedPacketCodec;\n    }\n}\nexports.ConnectionTCPAbridged = ConnectionTCPAbridged;\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,qBAAqB,GAAGF,OAAO,CAACG,mBAAmB,GAAG,KAAK,CAAC;AACpE,MAAMC,SAAS,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC1C,MAAMC,YAAY,GAAGD,OAAO,CAAC,cAAc,CAAC;AAC5C,MAAME,aAAa,GAAGZ,eAAe,CAACU,OAAO,CAAC,aAAa,CAAC,CAAC;AAC7D,MAAMF,mBAAmB,SAASG,YAAY,CAACE,WAAW,CAAC;EACvDC,WAAWA,CAACC,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACC,GAAG,GAAGR,mBAAmB,CAACQ,GAAG;IAClC,IAAI,CAACC,YAAY,GAAGT,mBAAmB,CAACS,YAAY;EACxD;EACAC,YAAYA,CAACC,IAAI,EAAE;IACf,IAAIC,MAAM,GAAGD,IAAI,CAACC,MAAM,IAAI,CAAC;IAC7B,IAAIC,IAAI;IACR,IAAID,MAAM,GAAG,GAAG,EAAE;MACd,MAAME,CAAC,GAAGC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MACzBF,CAAC,CAACG,UAAU,CAACL,MAAM,EAAE,CAAC,CAAC;MACvBC,IAAI,GAAGC,CAAC;IACZ,CAAC,MACI;MACDD,IAAI,GAAGE,MAAM,CAACG,MAAM,CAAC,CACjBH,MAAM,CAACI,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,EACxB,CAAC,CAAC,EAAElB,SAAS,CAACmB,oBAAoB,EAAE,CAAC,CAAC,EAAEhB,aAAa,CAACiB,OAAO,EAAET,MAAM,CAAC,EAAE,CAAC,CAAC,CAC7E,CAAC;IACN;IACA,OAAOG,MAAM,CAACG,MAAM,CAAC,CAACL,IAAI,EAAEF,IAAI,CAAC,CAAC;EACtC;EACA,MAAMW,UAAUA,CAACC,MAAM,EAAE;IACrB,MAAMC,QAAQ,GAAG,MAAMD,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC;IACrC,IAAIb,MAAM,GAAGY,QAAQ,CAAC,CAAC,CAAC;IACxB,IAAIZ,MAAM,IAAI,GAAG,EAAE;MACfA,MAAM,GAAGG,MAAM,CAACG,MAAM,CAAC,CACnB,MAAMK,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC,EACpBV,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAClB,CAAC,CAACU,WAAW,CAAC,CAAC,CAAC;IACrB;IACA,OAAOH,MAAM,CAACE,IAAI,CAACb,MAAM,IAAI,CAAC,CAAC;EACnC;AACJ;AACAf,OAAO,CAACG,mBAAmB,GAAGA,mBAAmB;AACjDA,mBAAmB,CAACQ,GAAG,GAAGO,MAAM,CAACI,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC;AAClDnB,mBAAmB,CAACS,YAAY,GAAGM,MAAM,CAACI,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC;AACjE;AACA;AACA;AACA;AACA;AACA,MAAMpB,qBAAqB,SAASI,YAAY,CAACwB,UAAU,CAAC;EACxDrB,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,GAAGsB,SAAS,CAAC;IACnB,IAAI,CAACC,gBAAgB,GAAG7B,mBAAmB;EAC/C;AACJ;AACAH,OAAO,CAACE,qBAAqB,GAAGA,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}