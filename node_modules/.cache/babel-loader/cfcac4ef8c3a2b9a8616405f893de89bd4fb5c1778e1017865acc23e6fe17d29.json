{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PromisedNetSockets = void 0;\nconst net = __importStar(require(\"./net\"));\nconst socks_1 = require(\"./socks\");\nconst async_mutex_1 = require(\"async-mutex\");\nconst mutex = new async_mutex_1.Mutex();\nconst closeError = new Error(\"NetSocket was closed\");\nclass PromisedNetSockets {\n  constructor(proxy) {\n    this.client = undefined;\n    this.closed = true;\n    this.stream = Buffer.alloc(0);\n    if (proxy) {\n      // we only want to use this when it's not an MTProto proxy.\n      if (!(\"MTProxy\" in proxy)) {\n        if (!proxy.ip || !proxy.port || !proxy.socksType) {\n          throw new Error(`Invalid sockets params: ip=${proxy.ip}, port=${proxy.port}, socksType=${proxy.socksType}`);\n        }\n        this.proxy = proxy;\n      }\n    }\n  }\n  async readExactly(number) {\n    let readData = Buffer.alloc(0);\n    while (true) {\n      const thisTime = await this.read(number);\n      readData = Buffer.concat([readData, thisTime]);\n      number = number - thisTime.length;\n      if (!number || number === -437) {\n        return readData;\n      }\n    }\n  }\n  async read(number) {\n    if (this.closed) {\n      throw closeError;\n    }\n    await this.canRead;\n    if (this.closed) {\n      throw closeError;\n    }\n    const toReturn = this.stream.slice(0, number);\n    this.stream = this.stream.slice(number);\n    if (this.stream.length === 0) {\n      this.canRead = new Promise(resolve => {\n        this.resolveRead = resolve;\n      });\n    }\n    return toReturn;\n  }\n  async readAll() {\n    if (this.closed || !(await this.canRead)) {\n      throw closeError;\n    }\n    const toReturn = this.stream;\n    this.stream = Buffer.alloc(0);\n    this.canRead = new Promise(resolve => {\n      this.resolveRead = resolve;\n    });\n    return toReturn;\n  }\n  /**\n   * Creates a new connection\n   * @param port\n   * @param ip\n   * @returns {Promise<void>}\n   */\n  async connect(port, ip) {\n    this.stream = Buffer.alloc(0);\n    let connected = false;\n    if (this.proxy) {\n      const info = await socks_1.SocksClient.createConnection({\n        proxy: {\n          host: this.proxy.ip,\n          port: this.proxy.port,\n          type: this.proxy.socksType,\n          userId: this.proxy.username,\n          password: this.proxy.password\n        },\n        command: \"connect\",\n        timeout: (this.proxy.timeout || 5) * 1000,\n        destination: {\n          host: ip,\n          port: port\n        }\n      });\n      this.client = info.socket;\n      connected = true;\n    } else {\n      this.client = new net.Socket();\n    }\n    this.canRead = new Promise(resolve => {\n      this.resolveRead = resolve;\n    });\n    this.closed = false;\n    return new Promise((resolve, reject) => {\n      if (this.client) {\n        if (connected) {\n          this.receive();\n          resolve(this);\n        } else {\n          this.client.connect(port, ip, () => {\n            this.receive();\n            resolve(this);\n          });\n        }\n        this.client.on(\"error\", reject);\n        this.client.on(\"close\", () => {\n          if (this.client && this.client.destroyed) {\n            if (this.resolveRead) {\n              this.resolveRead(false);\n            }\n            this.closed = true;\n          }\n        });\n      }\n    });\n  }\n  write(data) {\n    if (this.closed) {\n      throw closeError;\n    }\n    if (this.client) {\n      this.client.write(data);\n    }\n  }\n  async close() {\n    if (this.client) {\n      await this.client.destroy();\n      this.client.unref();\n    }\n    this.closed = true;\n  }\n  async receive() {\n    if (this.client) {\n      this.client.on(\"data\", async message => {\n        const release = await mutex.acquire();\n        try {\n          let data;\n          //CONTEST BROWSER\n          this.stream = Buffer.concat([this.stream, message]);\n          if (this.resolveRead) {\n            this.resolveRead(true);\n          }\n        } finally {\n          release();\n        }\n      });\n    }\n  }\n  toString() {\n    return \"PromisedNetSocket\";\n  }\n}\nexports.PromisedNetSockets = PromisedNetSockets;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}