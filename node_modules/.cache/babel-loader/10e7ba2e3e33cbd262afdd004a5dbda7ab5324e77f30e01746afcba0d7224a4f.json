{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MTProtoState = void 0;\nconst big_integer_1 = __importDefault(require(\"big-integer\"));\nconst __1 = require(\"../\");\nconst tl_1 = require(\"../tl\");\nconst Helpers_1 = require(\"../Helpers\");\nconst core_1 = require(\"../tl/core\");\nconst extensions_1 = require(\"../extensions\");\nconst IGE_1 = require(\"../crypto/IGE\");\nconst errors_1 = require(\"../errors\");\nclass MTProtoState {\n  /**\n   *\n   `telethon.network.mtprotosender.MTProtoSender` needs to hold a state\n   in order to be able to encrypt and decrypt incoming/outgoing messages,\n   as well as generating the message IDs. Instances of this class hold\n   together all the required information.\n    It doesn't make sense to use `telethon.sessions.abstract.Session` for\n   the sender because the sender should *not* be concerned about storing\n   this information to disk, as one may create as many senders as they\n   desire to any other data center, or some CDN. Using the same session\n   for all these is not a good idea as each need their own authkey, and\n   the concept of \"copying\" sessions with the unnecessary entities or\n   updates state for these connections doesn't make sense.\n    While it would be possible to have a `MTProtoPlainState` that does no\n   encryption so that it was usable through the `MTProtoLayer` and thus\n   avoid the need for a `MTProtoPlainSender`, the `MTProtoLayer` is more\n   focused to efficiency and this state is also more advanced (since it\n   supports gzipping and invoking after other message IDs). There are too\n   many methods that would be needed to make it convenient to use for the\n   authentication process, at which point the `MTProtoPlainSender` is better\n   * @param authKey\n   * @param loggers\n   * @param securityChecks\n   */\n  constructor(authKey, loggers, securityChecks = true) {\n    this.authKey = authKey;\n    this._log = loggers;\n    this.timeOffset = 0;\n    this.salt = big_integer_1.default.zero;\n    this._sequence = 0;\n    this.id = this._lastMsgId = big_integer_1.default.zero;\n    this.msgIds = [];\n    this.securityChecks = securityChecks;\n    this.reset();\n  }\n  /**\n   * Resets the state\n   */\n  reset() {\n    // Session IDs can be random on every connection\n    this.id = __1.helpers.generateRandomLong(true);\n    this._sequence = 0;\n    this._lastMsgId = big_integer_1.default.zero;\n    this.msgIds = [];\n  }\n  /**\n   * Updates the message ID to a new one,\n   * used when the time offset changed.\n   * @param message\n   */\n  updateMessageId(message) {\n    message.msgId = this._getNewMsgId();\n  }\n  /**\n   * Calculate the key based on Telegram guidelines, specifying whether it's the client or not\n   * @param authKey\n   * @param msgKey\n   * @param client\n   * @returns {{iv: Buffer, key: Buffer}}\n   */\n  async _calcKey(authKey, msgKey, client) {\n    const x = client ? 0 : 8;\n    const [sha256a, sha256b] = await Promise.all([(0, Helpers_1.sha256)(Buffer.concat([msgKey, authKey.slice(x, x + 36)])), (0, Helpers_1.sha256)(Buffer.concat([authKey.slice(x + 40, x + 76), msgKey]))]);\n    const key = Buffer.concat([sha256a.slice(0, 8), sha256b.slice(8, 24), sha256a.slice(24, 32)]);\n    const iv = Buffer.concat([sha256b.slice(0, 8), sha256a.slice(8, 24), sha256b.slice(24, 32)]);\n    return {\n      key,\n      iv\n    };\n  }\n  /**\n   * Writes a message containing the given data into buffer.\n   * Returns the message id.\n   * @param buffer\n   * @param data\n   * @param contentRelated\n   * @param afterId\n   */\n  async writeDataAsMessage(buffer, data, contentRelated, afterId) {\n    const msgId = this._getNewMsgId();\n    const seqNo = this._getSeqNo(contentRelated);\n    let body;\n    if (!afterId) {\n      body = await core_1.GZIPPacked.gzipIfSmaller(contentRelated, data);\n    } else {\n      body = await core_1.GZIPPacked.gzipIfSmaller(contentRelated, new tl_1.Api.InvokeAfterMsg({\n        msgId: afterId,\n        query: {\n          getBytes() {\n            return data;\n          }\n        }\n      }).getBytes());\n    }\n    const s = Buffer.alloc(4);\n    s.writeInt32LE(seqNo, 0);\n    const b = Buffer.alloc(4);\n    b.writeInt32LE(body.length, 0);\n    const m = (0, Helpers_1.toSignedLittleBuffer)(msgId, 8);\n    buffer.write(Buffer.concat([m, s, b]));\n    buffer.write(body);\n    return msgId;\n  }\n  /**\n   * Encrypts the given message data using the current authorization key\n   * following MTProto 2.0 guidelines core.telegram.org/mtproto/description.\n   * @param data\n   */\n  async encryptMessageData(data) {\n    if (!this.authKey) {\n      throw new Error(\"Auth key unset\");\n    }\n    await this.authKey.waitForKey();\n    const authKey = this.authKey.getKey();\n    if (!authKey) {\n      throw new Error(\"Auth key unset\");\n    }\n    if (!this.salt || !this.id || !authKey || !this.authKey.keyId) {\n      throw new Error(\"Unset params\");\n    }\n    const s = (0, Helpers_1.toSignedLittleBuffer)(this.salt, 8);\n    const i = (0, Helpers_1.toSignedLittleBuffer)(this.id, 8);\n    data = Buffer.concat([Buffer.concat([s, i]), data]);\n    const padding = __1.helpers.generateRandomBytes(__1.helpers.mod(-(data.length + 12), 16) + 12);\n    // Being substr(what, offset, length); x = 0 for client\n    // \"msg_key_large = SHA256(substr(auth_key, 88+x, 32) + pt + padding)\"\n    const msgKeyLarge = await (0, Helpers_1.sha256)(Buffer.concat([authKey.slice(88, 88 + 32), data, padding]));\n    // \"msg_key = substr (msg_key_large, 8, 16)\"\n    const msgKey = msgKeyLarge.slice(8, 24);\n    const {\n      iv,\n      key\n    } = await this._calcKey(authKey, msgKey, true);\n    const keyId = __1.helpers.readBufferFromBigInt(this.authKey.keyId, 8);\n    return Buffer.concat([keyId, msgKey, new IGE_1.IGE(key, iv).encryptIge(Buffer.concat([data, padding]))]);\n  }\n  /**\n   * Inverse of `encrypt_message_data` for incoming server messages.\n   * @param body\n   */\n  async decryptMessageData(body) {\n    if (!this.authKey) {\n      throw new Error(\"Auth key unset\");\n    }\n    if (body.length < 8) {\n      throw new errors_1.InvalidBufferError(body);\n    }\n    // TODO Check salt,sessionId, and sequenceNumber\n    const keyId = __1.helpers.readBigIntFromBuffer(body.slice(0, 8));\n    if (!this.authKey.keyId || keyId.neq(this.authKey.keyId)) {\n      throw new errors_1.SecurityError(\"Server replied with an invalid auth key\");\n    }\n    const authKey = this.authKey.getKey();\n    if (!authKey) {\n      throw new errors_1.SecurityError(\"Unset AuthKey\");\n    }\n    const msgKey = body.slice(8, 24);\n    const {\n      iv,\n      key\n    } = await this._calcKey(authKey, msgKey, false);\n    body = new IGE_1.IGE(key, iv).decryptIge(body.slice(24));\n    // https://core.telegram.org/mtproto/security_guidelines\n    // Sections \"checking sha256 hash\" and \"message length\"\n    const ourKey = await (0, Helpers_1.sha256)(Buffer.concat([authKey.slice(96, 96 + 32), body]));\n    if (!msgKey.equals(ourKey.slice(8, 24))) {\n      throw new errors_1.SecurityError(\"Received msg_key doesn't match with expected one\");\n    }\n    const reader = new extensions_1.BinaryReader(body);\n    reader.readLong(); // removeSalt\n    const serverId = reader.readLong();\n    if (serverId.neq(this.id)) {\n      // throw new SecurityError('Server replied with a wrong session ID');\n    }\n    const remoteMsgId = reader.readLong();\n    if (this.msgIds.includes(remoteMsgId.toString()) && this.securityChecks) {\n      throw new errors_1.SecurityError(\"Duplicate msgIds\");\n    }\n    if (this.msgIds.length > 500) {\n      this.msgIds.shift();\n    }\n    this.msgIds.push(remoteMsgId.toString());\n    const remoteSequence = reader.readInt();\n    reader.readInt(); // msgLen for the inner object, padding ignored\n    // We could read msg_len bytes and use those in a new reader to read\n    // the next TLObject without including the padding, but since the\n    // reader isn't used for anything else after this, it's unnecessary.\n    const obj = reader.tgReadObject();\n    return new core_1.TLMessage(remoteMsgId, remoteSequence, obj);\n  }\n  /**\n   * Generates a new unique message ID based on the current\n   * time (in ms) since epoch, applying a known time offset.\n   * @private\n   */\n  _getNewMsgId() {\n    const now = new Date().getTime() / 1000 + this.timeOffset;\n    const nanoseconds = Math.floor((now - Math.floor(now)) * 1e9);\n    let newMsgId = (0, big_integer_1.default)(Math.floor(now)).shiftLeft((0, big_integer_1.default)(32)).or((0, big_integer_1.default)(nanoseconds).shiftLeft((0, big_integer_1.default)(2)));\n    if (this._lastMsgId.greaterOrEquals(newMsgId)) {\n      newMsgId = this._lastMsgId.add((0, big_integer_1.default)(4));\n    }\n    this._lastMsgId = newMsgId;\n    return newMsgId;\n  }\n  /**\n   * Updates the time offset to the correct\n   * one given a known valid message ID.\n   * @param correctMsgId {BigInteger}\n   */\n  updateTimeOffset(correctMsgId) {\n    const bad = this._getNewMsgId();\n    const old = this.timeOffset;\n    const now = Math.floor(new Date().getTime() / 1000);\n    const correct = correctMsgId.shiftRight((0, big_integer_1.default)(32)).toJSNumber();\n    this.timeOffset = correct - now;\n    if (this.timeOffset !== old) {\n      this._lastMsgId = big_integer_1.default.zero;\n      this._log.debug(`Updated time offset (old offset ${old}, bad ${bad}, good ${correctMsgId}, new ${this.timeOffset})`);\n    }\n    return this.timeOffset;\n  }\n  /**\n   * Generates the next sequence number depending on whether\n   * it should be for a content-related query or not.\n   * @param contentRelated\n   * @private\n   */\n  _getSeqNo(contentRelated) {\n    if (contentRelated) {\n      const result = this._sequence * 2 + 1;\n      this._sequence += 1;\n      return result;\n    } else {\n      return this._sequence * 2;\n    }\n  }\n}\nexports.MTProtoState = MTProtoState;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","MTProtoState","big_integer_1","require","__1","tl_1","Helpers_1","core_1","extensions_1","IGE_1","errors_1","constructor","authKey","loggers","securityChecks","_log","timeOffset","salt","default","zero","_sequence","id","_lastMsgId","msgIds","reset","helpers","generateRandomLong","updateMessageId","message","msgId","_getNewMsgId","_calcKey","msgKey","client","x","sha256a","sha256b","Promise","all","sha256","Buffer","concat","slice","key","iv","writeDataAsMessage","buffer","data","contentRelated","afterId","seqNo","_getSeqNo","body","GZIPPacked","gzipIfSmaller","Api","InvokeAfterMsg","query","getBytes","s","alloc","writeInt32LE","b","length","m","toSignedLittleBuffer","write","encryptMessageData","Error","waitForKey","getKey","keyId","i","padding","generateRandomBytes","msgKeyLarge","readBufferFromBigInt","IGE","encryptIge","decryptMessageData","InvalidBufferError","readBigIntFromBuffer","neq","SecurityError","decryptIge","ourKey","equals","reader","BinaryReader","readLong","serverId","remoteMsgId","includes","toString","shift","push","remoteSequence","readInt","obj","tgReadObject","TLMessage","now","Date","getTime","nanoseconds","Math","floor","newMsgId","shiftLeft","or","greaterOrEquals","add","updateTimeOffset","correctMsgId","bad","old","correct","shiftRight","toJSNumber","debug","result"],"sources":["C:/Users/Rodrick/Documents/telegram-media-downloader/node_modules/telegram/network/MTProtoState.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MTProtoState = void 0;\nconst big_integer_1 = __importDefault(require(\"big-integer\"));\nconst __1 = require(\"../\");\nconst tl_1 = require(\"../tl\");\nconst Helpers_1 = require(\"../Helpers\");\nconst core_1 = require(\"../tl/core\");\nconst extensions_1 = require(\"../extensions\");\nconst IGE_1 = require(\"../crypto/IGE\");\nconst errors_1 = require(\"../errors\");\nclass MTProtoState {\n    /**\n     *\n     `telethon.network.mtprotosender.MTProtoSender` needs to hold a state\n     in order to be able to encrypt and decrypt incoming/outgoing messages,\n     as well as generating the message IDs. Instances of this class hold\n     together all the required information.\n\n     It doesn't make sense to use `telethon.sessions.abstract.Session` for\n     the sender because the sender should *not* be concerned about storing\n     this information to disk, as one may create as many senders as they\n     desire to any other data center, or some CDN. Using the same session\n     for all these is not a good idea as each need their own authkey, and\n     the concept of \"copying\" sessions with the unnecessary entities or\n     updates state for these connections doesn't make sense.\n\n     While it would be possible to have a `MTProtoPlainState` that does no\n     encryption so that it was usable through the `MTProtoLayer` and thus\n     avoid the need for a `MTProtoPlainSender`, the `MTProtoLayer` is more\n     focused to efficiency and this state is also more advanced (since it\n     supports gzipping and invoking after other message IDs). There are too\n     many methods that would be needed to make it convenient to use for the\n     authentication process, at which point the `MTProtoPlainSender` is better\n     * @param authKey\n     * @param loggers\n     * @param securityChecks\n     */\n    constructor(authKey, loggers, securityChecks = true) {\n        this.authKey = authKey;\n        this._log = loggers;\n        this.timeOffset = 0;\n        this.salt = big_integer_1.default.zero;\n        this._sequence = 0;\n        this.id = this._lastMsgId = big_integer_1.default.zero;\n        this.msgIds = [];\n        this.securityChecks = securityChecks;\n        this.reset();\n    }\n    /**\n     * Resets the state\n     */\n    reset() {\n        // Session IDs can be random on every connection\n        this.id = __1.helpers.generateRandomLong(true);\n        this._sequence = 0;\n        this._lastMsgId = big_integer_1.default.zero;\n        this.msgIds = [];\n    }\n    /**\n     * Updates the message ID to a new one,\n     * used when the time offset changed.\n     * @param message\n     */\n    updateMessageId(message) {\n        message.msgId = this._getNewMsgId();\n    }\n    /**\n     * Calculate the key based on Telegram guidelines, specifying whether it's the client or not\n     * @param authKey\n     * @param msgKey\n     * @param client\n     * @returns {{iv: Buffer, key: Buffer}}\n     */\n    async _calcKey(authKey, msgKey, client) {\n        const x = client ? 0 : 8;\n        const [sha256a, sha256b] = await Promise.all([\n            (0, Helpers_1.sha256)(Buffer.concat([msgKey, authKey.slice(x, x + 36)])),\n            (0, Helpers_1.sha256)(Buffer.concat([authKey.slice(x + 40, x + 76), msgKey])),\n        ]);\n        const key = Buffer.concat([\n            sha256a.slice(0, 8),\n            sha256b.slice(8, 24),\n            sha256a.slice(24, 32),\n        ]);\n        const iv = Buffer.concat([\n            sha256b.slice(0, 8),\n            sha256a.slice(8, 24),\n            sha256b.slice(24, 32),\n        ]);\n        return { key, iv };\n    }\n    /**\n     * Writes a message containing the given data into buffer.\n     * Returns the message id.\n     * @param buffer\n     * @param data\n     * @param contentRelated\n     * @param afterId\n     */\n    async writeDataAsMessage(buffer, data, contentRelated, afterId) {\n        const msgId = this._getNewMsgId();\n        const seqNo = this._getSeqNo(contentRelated);\n        let body;\n        if (!afterId) {\n            body = await core_1.GZIPPacked.gzipIfSmaller(contentRelated, data);\n        }\n        else {\n            body = await core_1.GZIPPacked.gzipIfSmaller(contentRelated, new tl_1.Api.InvokeAfterMsg({\n                msgId: afterId,\n                query: {\n                    getBytes() {\n                        return data;\n                    },\n                },\n            }).getBytes());\n        }\n        const s = Buffer.alloc(4);\n        s.writeInt32LE(seqNo, 0);\n        const b = Buffer.alloc(4);\n        b.writeInt32LE(body.length, 0);\n        const m = (0, Helpers_1.toSignedLittleBuffer)(msgId, 8);\n        buffer.write(Buffer.concat([m, s, b]));\n        buffer.write(body);\n        return msgId;\n    }\n    /**\n     * Encrypts the given message data using the current authorization key\n     * following MTProto 2.0 guidelines core.telegram.org/mtproto/description.\n     * @param data\n     */\n    async encryptMessageData(data) {\n        if (!this.authKey) {\n            throw new Error(\"Auth key unset\");\n        }\n        await this.authKey.waitForKey();\n        const authKey = this.authKey.getKey();\n        if (!authKey) {\n            throw new Error(\"Auth key unset\");\n        }\n        if (!this.salt || !this.id || !authKey || !this.authKey.keyId) {\n            throw new Error(\"Unset params\");\n        }\n        const s = (0, Helpers_1.toSignedLittleBuffer)(this.salt, 8);\n        const i = (0, Helpers_1.toSignedLittleBuffer)(this.id, 8);\n        data = Buffer.concat([Buffer.concat([s, i]), data]);\n        const padding = __1.helpers.generateRandomBytes(__1.helpers.mod(-(data.length + 12), 16) + 12);\n        // Being substr(what, offset, length); x = 0 for client\n        // \"msg_key_large = SHA256(substr(auth_key, 88+x, 32) + pt + padding)\"\n        const msgKeyLarge = await (0, Helpers_1.sha256)(Buffer.concat([authKey.slice(88, 88 + 32), data, padding]));\n        // \"msg_key = substr (msg_key_large, 8, 16)\"\n        const msgKey = msgKeyLarge.slice(8, 24);\n        const { iv, key } = await this._calcKey(authKey, msgKey, true);\n        const keyId = __1.helpers.readBufferFromBigInt(this.authKey.keyId, 8);\n        return Buffer.concat([\n            keyId,\n            msgKey,\n            new IGE_1.IGE(key, iv).encryptIge(Buffer.concat([data, padding])),\n        ]);\n    }\n    /**\n     * Inverse of `encrypt_message_data` for incoming server messages.\n     * @param body\n     */\n    async decryptMessageData(body) {\n        if (!this.authKey) {\n            throw new Error(\"Auth key unset\");\n        }\n        if (body.length < 8) {\n            throw new errors_1.InvalidBufferError(body);\n        }\n        // TODO Check salt,sessionId, and sequenceNumber\n        const keyId = __1.helpers.readBigIntFromBuffer(body.slice(0, 8));\n        if (!this.authKey.keyId || keyId.neq(this.authKey.keyId)) {\n            throw new errors_1.SecurityError(\"Server replied with an invalid auth key\");\n        }\n        const authKey = this.authKey.getKey();\n        if (!authKey) {\n            throw new errors_1.SecurityError(\"Unset AuthKey\");\n        }\n        const msgKey = body.slice(8, 24);\n        const { iv, key } = await this._calcKey(authKey, msgKey, false);\n        body = new IGE_1.IGE(key, iv).decryptIge(body.slice(24));\n        // https://core.telegram.org/mtproto/security_guidelines\n        // Sections \"checking sha256 hash\" and \"message length\"\n        const ourKey = await (0, Helpers_1.sha256)(Buffer.concat([authKey.slice(96, 96 + 32), body]));\n        if (!msgKey.equals(ourKey.slice(8, 24))) {\n            throw new errors_1.SecurityError(\"Received msg_key doesn't match with expected one\");\n        }\n        const reader = new extensions_1.BinaryReader(body);\n        reader.readLong(); // removeSalt\n        const serverId = reader.readLong();\n        if (serverId.neq(this.id)) {\n            // throw new SecurityError('Server replied with a wrong session ID');\n        }\n        const remoteMsgId = reader.readLong();\n        if (this.msgIds.includes(remoteMsgId.toString()) &&\n            this.securityChecks) {\n            throw new errors_1.SecurityError(\"Duplicate msgIds\");\n        }\n        if (this.msgIds.length > 500) {\n            this.msgIds.shift();\n        }\n        this.msgIds.push(remoteMsgId.toString());\n        const remoteSequence = reader.readInt();\n        reader.readInt(); // msgLen for the inner object, padding ignored\n        // We could read msg_len bytes and use those in a new reader to read\n        // the next TLObject without including the padding, but since the\n        // reader isn't used for anything else after this, it's unnecessary.\n        const obj = reader.tgReadObject();\n        return new core_1.TLMessage(remoteMsgId, remoteSequence, obj);\n    }\n    /**\n     * Generates a new unique message ID based on the current\n     * time (in ms) since epoch, applying a known time offset.\n     * @private\n     */\n    _getNewMsgId() {\n        const now = new Date().getTime() / 1000 + this.timeOffset;\n        const nanoseconds = Math.floor((now - Math.floor(now)) * 1e9);\n        let newMsgId = (0, big_integer_1.default)(Math.floor(now))\n            .shiftLeft((0, big_integer_1.default)(32))\n            .or((0, big_integer_1.default)(nanoseconds).shiftLeft((0, big_integer_1.default)(2)));\n        if (this._lastMsgId.greaterOrEquals(newMsgId)) {\n            newMsgId = this._lastMsgId.add((0, big_integer_1.default)(4));\n        }\n        this._lastMsgId = newMsgId;\n        return newMsgId;\n    }\n    /**\n     * Updates the time offset to the correct\n     * one given a known valid message ID.\n     * @param correctMsgId {BigInteger}\n     */\n    updateTimeOffset(correctMsgId) {\n        const bad = this._getNewMsgId();\n        const old = this.timeOffset;\n        const now = Math.floor(new Date().getTime() / 1000);\n        const correct = correctMsgId.shiftRight((0, big_integer_1.default)(32)).toJSNumber();\n        this.timeOffset = correct - now;\n        if (this.timeOffset !== old) {\n            this._lastMsgId = big_integer_1.default.zero;\n            this._log.debug(`Updated time offset (old offset ${old}, bad ${bad}, good ${correctMsgId}, new ${this.timeOffset})`);\n        }\n        return this.timeOffset;\n    }\n    /**\n     * Generates the next sequence number depending on whether\n     * it should be for a content-related query or not.\n     * @param contentRelated\n     * @private\n     */\n    _getSeqNo(contentRelated) {\n        if (contentRelated) {\n            const result = this._sequence * 2 + 1;\n            this._sequence += 1;\n            return result;\n        }\n        else {\n            return this._sequence * 2;\n        }\n    }\n}\nexports.MTProtoState = MTProtoState;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}