{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GZIPPacked = void 0;\nconst __1 = require(\"../\");\nconst pako_1 = require(\"pako\");\nclass GZIPPacked {\n  constructor(data) {\n    this.data = data;\n    this.CONSTRUCTOR_ID = 0x3072cfa1;\n    this.classType = \"constructor\";\n  }\n  static async gzipIfSmaller(contentRelated, data) {\n    if (contentRelated && data.length > 512) {\n      const gzipped = await new GZIPPacked(data).toBytes();\n      if (gzipped.length < data.length) {\n        return gzipped;\n      }\n    }\n    return data;\n  }\n  static gzip(input) {\n    return Buffer.from(input);\n    // TODO this usually makes it faster for large requests\n    //return Buffer.from(deflate(input, { level: 9, gzip: true }))\n  }\n  static ungzip(input) {\n    return Buffer.from((0, pako_1.inflate)(input));\n  }\n  async toBytes() {\n    const g = Buffer.alloc(4);\n    g.writeUInt32LE(GZIPPacked.CONSTRUCTOR_ID, 0);\n    return Buffer.concat([g, (0, __1.serializeBytes)(await GZIPPacked.gzip(this.data))]);\n  }\n  static async read(reader) {\n    const constructor = reader.readInt(false);\n    if (constructor !== GZIPPacked.CONSTRUCTOR_ID) {\n      throw new Error(\"not equal\");\n    }\n    return GZIPPacked.gzip(reader.tgReadBytes());\n  }\n  static async fromReader(reader) {\n    const data = reader.tgReadBytes();\n    return new GZIPPacked(await GZIPPacked.ungzip(data));\n  }\n}\nexports.GZIPPacked = GZIPPacked;\nGZIPPacked.CONSTRUCTOR_ID = 0x3072cfa1;\nGZIPPacked.classType = \"constructor\";","map":{"version":3,"names":["Object","defineProperty","exports","value","GZIPPacked","__1","require","pako_1","constructor","data","CONSTRUCTOR_ID","classType","gzipIfSmaller","contentRelated","length","gzipped","toBytes","gzip","input","Buffer","from","ungzip","inflate","g","alloc","writeUInt32LE","concat","serializeBytes","read","reader","readInt","Error","tgReadBytes","fromReader"],"sources":["C:/Users/Rodrick/Documents/telegram-media-downloader/node_modules/telegram/tl/core/GZIPPacked.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GZIPPacked = void 0;\nconst __1 = require(\"../\");\nconst pako_1 = require(\"pako\");\nclass GZIPPacked {\n    constructor(data) {\n        this.data = data;\n        this.CONSTRUCTOR_ID = 0x3072cfa1;\n        this.classType = \"constructor\";\n    }\n    static async gzipIfSmaller(contentRelated, data) {\n        if (contentRelated && data.length > 512) {\n            const gzipped = await new GZIPPacked(data).toBytes();\n            if (gzipped.length < data.length) {\n                return gzipped;\n            }\n        }\n        return data;\n    }\n    static gzip(input) {\n        return Buffer.from(input);\n        // TODO this usually makes it faster for large requests\n        //return Buffer.from(deflate(input, { level: 9, gzip: true }))\n    }\n    static ungzip(input) {\n        return Buffer.from((0, pako_1.inflate)(input));\n    }\n    async toBytes() {\n        const g = Buffer.alloc(4);\n        g.writeUInt32LE(GZIPPacked.CONSTRUCTOR_ID, 0);\n        return Buffer.concat([\n            g,\n            (0, __1.serializeBytes)(await GZIPPacked.gzip(this.data)),\n        ]);\n    }\n    static async read(reader) {\n        const constructor = reader.readInt(false);\n        if (constructor !== GZIPPacked.CONSTRUCTOR_ID) {\n            throw new Error(\"not equal\");\n        }\n        return GZIPPacked.gzip(reader.tgReadBytes());\n    }\n    static async fromReader(reader) {\n        const data = reader.tgReadBytes();\n        return new GZIPPacked(await GZIPPacked.ungzip(data));\n    }\n}\nexports.GZIPPacked = GZIPPacked;\nGZIPPacked.CONSTRUCTOR_ID = 0x3072cfa1;\nGZIPPacked.classType = \"constructor\";\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,UAAU,GAAG,KAAK,CAAC;AAC3B,MAAMC,GAAG,GAAGC,OAAO,CAAC,KAAK,CAAC;AAC1B,MAAMC,MAAM,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC9B,MAAMF,UAAU,CAAC;EACbI,WAAWA,CAACC,IAAI,EAAE;IACd,IAAI,CAACA,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,cAAc,GAAG,UAAU;IAChC,IAAI,CAACC,SAAS,GAAG,aAAa;EAClC;EACA,aAAaC,aAAaA,CAACC,cAAc,EAAEJ,IAAI,EAAE;IAC7C,IAAII,cAAc,IAAIJ,IAAI,CAACK,MAAM,GAAG,GAAG,EAAE;MACrC,MAAMC,OAAO,GAAG,MAAM,IAAIX,UAAU,CAACK,IAAI,CAAC,CAACO,OAAO,CAAC,CAAC;MACpD,IAAID,OAAO,CAACD,MAAM,GAAGL,IAAI,CAACK,MAAM,EAAE;QAC9B,OAAOC,OAAO;MAClB;IACJ;IACA,OAAON,IAAI;EACf;EACA,OAAOQ,IAAIA,CAACC,KAAK,EAAE;IACf,OAAOC,MAAM,CAACC,IAAI,CAACF,KAAK,CAAC;IACzB;IACA;EACJ;EACA,OAAOG,MAAMA,CAACH,KAAK,EAAE;IACjB,OAAOC,MAAM,CAACC,IAAI,CAAC,CAAC,CAAC,EAAEb,MAAM,CAACe,OAAO,EAAEJ,KAAK,CAAC,CAAC;EAClD;EACA,MAAMF,OAAOA,CAAA,EAAG;IACZ,MAAMO,CAAC,GAAGJ,MAAM,CAACK,KAAK,CAAC,CAAC,CAAC;IACzBD,CAAC,CAACE,aAAa,CAACrB,UAAU,CAACM,cAAc,EAAE,CAAC,CAAC;IAC7C,OAAOS,MAAM,CAACO,MAAM,CAAC,CACjBH,CAAC,EACD,CAAC,CAAC,EAAElB,GAAG,CAACsB,cAAc,EAAE,MAAMvB,UAAU,CAACa,IAAI,CAAC,IAAI,CAACR,IAAI,CAAC,CAAC,CAC5D,CAAC;EACN;EACA,aAAamB,IAAIA,CAACC,MAAM,EAAE;IACtB,MAAMrB,WAAW,GAAGqB,MAAM,CAACC,OAAO,CAAC,KAAK,CAAC;IACzC,IAAItB,WAAW,KAAKJ,UAAU,CAACM,cAAc,EAAE;MAC3C,MAAM,IAAIqB,KAAK,CAAC,WAAW,CAAC;IAChC;IACA,OAAO3B,UAAU,CAACa,IAAI,CAACY,MAAM,CAACG,WAAW,CAAC,CAAC,CAAC;EAChD;EACA,aAAaC,UAAUA,CAACJ,MAAM,EAAE;IAC5B,MAAMpB,IAAI,GAAGoB,MAAM,CAACG,WAAW,CAAC,CAAC;IACjC,OAAO,IAAI5B,UAAU,CAAC,MAAMA,UAAU,CAACiB,MAAM,CAACZ,IAAI,CAAC,CAAC;EACxD;AACJ;AACAP,OAAO,CAACE,UAAU,GAAGA,UAAU;AAC/BA,UAAU,CAACM,cAAc,GAAG,UAAU;AACtCN,UAAU,CAACO,SAAS,GAAG,aAAa","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}