{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Forward = void 0;\nconst chatGetter_1 = require(\"./chatGetter\");\nconst senderGetter_1 = require(\"./senderGetter\");\nconst Helpers_1 = require(\"../../Helpers\");\nconst Utils_1 = require(\"../../Utils\");\nconst inspect_1 = require(\"../../inspect\");\nclass Forward extends senderGetter_1.SenderGetter {\n  [inspect_1.inspect.custom]() {\n    return (0, Helpers_1.betterConsoleLog)(this);\n  }\n  constructor(client, original, entities) {\n    super();\n    // contains info for the original header sent by telegram.\n    this.originalFwd = original;\n    let senderId = undefined;\n    let sender = undefined;\n    let inputSender = undefined;\n    let peer = undefined;\n    let chat = undefined;\n    let inputChat = undefined;\n    if (original.fromId) {\n      const ty = (0, Helpers_1._entityType)(original.fromId);\n      if (ty === Helpers_1._EntityType.USER) {\n        senderId = (0, Utils_1.getPeerId)(original.fromId);\n        [sender, inputSender] = (0, Utils_1._getEntityPair)(senderId, entities, client._entityCache);\n      } else if (ty === Helpers_1._EntityType.CHANNEL || ty === Helpers_1._EntityType.CHAT) {\n        peer = original.fromId;\n        [chat, inputChat] = (0, Utils_1._getEntityPair)((0, Utils_1.getPeerId)(peer), entities, client._entityCache);\n      }\n    }\n    chatGetter_1.ChatGetter.initChatClass(this, {\n      chatPeer: peer,\n      chat: chat,\n      inputChat: inputChat\n    });\n    senderGetter_1.SenderGetter.initSenderClass(this, {\n      senderId: senderId ? (0, Helpers_1.returnBigInt)(senderId) : undefined,\n      sender: sender,\n      inputSender: inputSender\n    });\n    this._client = client;\n  }\n}\nexports.Forward = Forward;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}