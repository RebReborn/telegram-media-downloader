{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PromisedNetSockets = void 0;\nconst net = __importStar(require(\"./net\"));\nconst socks_1 = require(\"./socks\");\nconst async_mutex_1 = require(\"async-mutex\");\nconst mutex = new async_mutex_1.Mutex();\nconst closeError = new Error(\"NetSocket was closed\");\nclass PromisedNetSockets {\n  constructor(proxy) {\n    this.client = undefined;\n    this.closed = true;\n    this.stream = Buffer.alloc(0);\n    if (proxy) {\n      // we only want to use this when it's not an MTProto proxy.\n      if (!(\"MTProxy\" in proxy)) {\n        if (!proxy.ip || !proxy.port || !proxy.socksType) {\n          throw new Error(`Invalid sockets params: ip=${proxy.ip}, port=${proxy.port}, socksType=${proxy.socksType}`);\n        }\n        this.proxy = proxy;\n      }\n    }\n  }\n  async readExactly(number) {\n    let readData = Buffer.alloc(0);\n    while (true) {\n      const thisTime = await this.read(number);\n      readData = Buffer.concat([readData, thisTime]);\n      number = number - thisTime.length;\n      if (!number || number === -437) {\n        return readData;\n      }\n    }\n  }\n  async read(number) {\n    if (this.closed) {\n      throw closeError;\n    }\n    await this.canRead;\n    if (this.closed) {\n      throw closeError;\n    }\n    const toReturn = this.stream.slice(0, number);\n    this.stream = this.stream.slice(number);\n    if (this.stream.length === 0) {\n      this.canRead = new Promise(resolve => {\n        this.resolveRead = resolve;\n      });\n    }\n    return toReturn;\n  }\n  async readAll() {\n    if (this.closed || !(await this.canRead)) {\n      throw closeError;\n    }\n    const toReturn = this.stream;\n    this.stream = Buffer.alloc(0);\n    this.canRead = new Promise(resolve => {\n      this.resolveRead = resolve;\n    });\n    return toReturn;\n  }\n  /**\n   * Creates a new connection\n   * @param port\n   * @param ip\n   * @returns {Promise<void>}\n   */\n  async connect(port, ip) {\n    this.stream = Buffer.alloc(0);\n    let connected = false;\n    if (this.proxy) {\n      const info = await socks_1.SocksClient.createConnection({\n        proxy: {\n          host: this.proxy.ip,\n          port: this.proxy.port,\n          type: this.proxy.socksType,\n          userId: this.proxy.username,\n          password: this.proxy.password\n        },\n        command: \"connect\",\n        timeout: (this.proxy.timeout || 5) * 1000,\n        destination: {\n          host: ip,\n          port: port\n        }\n      });\n      this.client = info.socket;\n      connected = true;\n    } else {\n      this.client = new net.Socket();\n    }\n    this.canRead = new Promise(resolve => {\n      this.resolveRead = resolve;\n    });\n    this.closed = false;\n    return new Promise((resolve, reject) => {\n      if (this.client) {\n        if (connected) {\n          this.receive();\n          resolve(this);\n        } else {\n          this.client.connect(port, ip, () => {\n            this.receive();\n            resolve(this);\n          });\n        }\n        this.client.on(\"error\", reject);\n        this.client.on(\"close\", () => {\n          if (this.client && this.client.destroyed) {\n            if (this.resolveRead) {\n              this.resolveRead(false);\n            }\n            this.closed = true;\n          }\n        });\n      }\n    });\n  }\n  write(data) {\n    if (this.closed) {\n      throw closeError;\n    }\n    if (this.client) {\n      this.client.write(data);\n    }\n  }\n  async close() {\n    if (this.client) {\n      await this.client.destroy();\n      this.client.unref();\n    }\n    this.closed = true;\n  }\n  async receive() {\n    if (this.client) {\n      this.client.on(\"data\", async message => {\n        const release = await mutex.acquire();\n        try {\n          let data;\n          //CONTEST BROWSER\n          this.stream = Buffer.concat([this.stream, message]);\n          if (this.resolveRead) {\n            this.resolveRead(true);\n          }\n        } finally {\n          release();\n        }\n      });\n    }\n  }\n  toString() {\n    return \"PromisedNetSocket\";\n  }\n}\nexports.PromisedNetSockets = PromisedNetSockets;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","PromisedNetSockets","net","require","socks_1","async_mutex_1","mutex","Mutex","closeError","Error","constructor","proxy","client","closed","stream","Buffer","alloc","ip","port","socksType","readExactly","number","readData","thisTime","read","concat","length","canRead","toReturn","slice","Promise","resolve","resolveRead","readAll","connect","connected","info","SocksClient","createConnection","host","type","userId","username","password","command","timeout","destination","socket","Socket","reject","receive","on","destroyed","write","data","close","destroy","unref","message","release","acquire","toString"],"sources":["C:/Users/Rodrick/Documents/telegram-media-downloader/node_modules/telegram/extensions/PromisedNetSockets.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PromisedNetSockets = void 0;\nconst net = __importStar(require(\"./net\"));\nconst socks_1 = require(\"./socks\");\nconst async_mutex_1 = require(\"async-mutex\");\nconst mutex = new async_mutex_1.Mutex();\nconst closeError = new Error(\"NetSocket was closed\");\nclass PromisedNetSockets {\n    constructor(proxy) {\n        this.client = undefined;\n        this.closed = true;\n        this.stream = Buffer.alloc(0);\n        if (proxy) {\n            // we only want to use this when it's not an MTProto proxy.\n            if (!(\"MTProxy\" in proxy)) {\n                if (!proxy.ip || !proxy.port || !proxy.socksType) {\n                    throw new Error(`Invalid sockets params: ip=${proxy.ip}, port=${proxy.port}, socksType=${proxy.socksType}`);\n                }\n                this.proxy = proxy;\n            }\n        }\n    }\n    async readExactly(number) {\n        let readData = Buffer.alloc(0);\n        while (true) {\n            const thisTime = await this.read(number);\n            readData = Buffer.concat([readData, thisTime]);\n            number = number - thisTime.length;\n            if (!number || number === -437) {\n                return readData;\n            }\n        }\n    }\n    async read(number) {\n        if (this.closed) {\n            throw closeError;\n        }\n        await this.canRead;\n        if (this.closed) {\n            throw closeError;\n        }\n        const toReturn = this.stream.slice(0, number);\n        this.stream = this.stream.slice(number);\n        if (this.stream.length === 0) {\n            this.canRead = new Promise((resolve) => {\n                this.resolveRead = resolve;\n            });\n        }\n        return toReturn;\n    }\n    async readAll() {\n        if (this.closed || !(await this.canRead)) {\n            throw closeError;\n        }\n        const toReturn = this.stream;\n        this.stream = Buffer.alloc(0);\n        this.canRead = new Promise((resolve) => {\n            this.resolveRead = resolve;\n        });\n        return toReturn;\n    }\n    /**\n     * Creates a new connection\n     * @param port\n     * @param ip\n     * @returns {Promise<void>}\n     */\n    async connect(port, ip) {\n        this.stream = Buffer.alloc(0);\n        let connected = false;\n        if (this.proxy) {\n            const info = await socks_1.SocksClient.createConnection({\n                proxy: {\n                    host: this.proxy.ip,\n                    port: this.proxy.port,\n                    type: this.proxy.socksType,\n                    userId: this.proxy.username,\n                    password: this.proxy.password,\n                },\n                command: \"connect\",\n                timeout: (this.proxy.timeout || 5) * 1000,\n                destination: {\n                    host: ip,\n                    port: port,\n                },\n            });\n            this.client = info.socket;\n            connected = true;\n        }\n        else {\n            this.client = new net.Socket();\n        }\n        this.canRead = new Promise((resolve) => {\n            this.resolveRead = resolve;\n        });\n        this.closed = false;\n        return new Promise((resolve, reject) => {\n            if (this.client) {\n                if (connected) {\n                    this.receive();\n                    resolve(this);\n                }\n                else {\n                    this.client.connect(port, ip, () => {\n                        this.receive();\n                        resolve(this);\n                    });\n                }\n                this.client.on(\"error\", reject);\n                this.client.on(\"close\", () => {\n                    if (this.client && this.client.destroyed) {\n                        if (this.resolveRead) {\n                            this.resolveRead(false);\n                        }\n                        this.closed = true;\n                    }\n                });\n            }\n        });\n    }\n    write(data) {\n        if (this.closed) {\n            throw closeError;\n        }\n        if (this.client) {\n            this.client.write(data);\n        }\n    }\n    async close() {\n        if (this.client) {\n            await this.client.destroy();\n            this.client.unref();\n        }\n        this.closed = true;\n    }\n    async receive() {\n        if (this.client) {\n            this.client.on(\"data\", async (message) => {\n                const release = await mutex.acquire();\n                try {\n                    let data;\n                    //CONTEST BROWSER\n                    this.stream = Buffer.concat([this.stream, message]);\n                    if (this.resolveRead) {\n                        this.resolveRead(true);\n                    }\n                }\n                finally {\n                    release();\n                }\n            });\n        }\n    }\n    toString() {\n        return \"PromisedNetSocket\";\n    }\n}\nexports.PromisedNetSockets = PromisedNetSockets;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}