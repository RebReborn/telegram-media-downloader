{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GZIPPacked = void 0;\nconst __1 = require(\"../\");\nconst pako_1 = require(\"pako\");\nclass GZIPPacked {\n  constructor(data) {\n    this.data = data;\n    this.CONSTRUCTOR_ID = 0x3072cfa1;\n    this.classType = \"constructor\";\n  }\n  static async gzipIfSmaller(contentRelated, data) {\n    if (contentRelated && data.length > 512) {\n      const gzipped = await new GZIPPacked(data).toBytes();\n      if (gzipped.length < data.length) {\n        return gzipped;\n      }\n    }\n    return data;\n  }\n  static gzip(input) {\n    return Buffer.from(input);\n    // TODO this usually makes it faster for large requests\n    //return Buffer.from(deflate(input, { level: 9, gzip: true }))\n  }\n  static ungzip(input) {\n    return Buffer.from((0, pako_1.inflate)(input));\n  }\n  async toBytes() {\n    const g = Buffer.alloc(4);\n    g.writeUInt32LE(GZIPPacked.CONSTRUCTOR_ID, 0);\n    return Buffer.concat([g, (0, __1.serializeBytes)(await GZIPPacked.gzip(this.data))]);\n  }\n  static async read(reader) {\n    const constructor = reader.readInt(false);\n    if (constructor !== GZIPPacked.CONSTRUCTOR_ID) {\n      throw new Error(\"not equal\");\n    }\n    return GZIPPacked.gzip(reader.tgReadBytes());\n  }\n  static async fromReader(reader) {\n    const data = reader.tgReadBytes();\n    return new GZIPPacked(await GZIPPacked.ungzip(data));\n  }\n}\nexports.GZIPPacked = GZIPPacked;\nGZIPPacked.CONSTRUCTOR_ID = 0x3072cfa1;\nGZIPPacked.classType = \"constructor\";","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}