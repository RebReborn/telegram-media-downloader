{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ab2i = exports.i2ab = exports.isBigEndian = void 0;\nexports.i2abLow = i2abLow;\nexports.i2abBig = i2abBig;\nexports.ab2iLow = ab2iLow;\nexports.ab2iBig = ab2iBig;\n/**\n * Uint32Array -> ArrayBuffer (low-endian os)\n */\nfunction i2abLow(buf) {\n  const uint8 = new Uint8Array(buf.length * 4);\n  let i = 0;\n  for (let j = 0; j < buf.length; j++) {\n    const int = buf[j];\n    uint8[i++] = int >>> 24;\n    uint8[i++] = int >> 16 & 0xff;\n    uint8[i++] = int >> 8 & 0xff;\n    uint8[i++] = int & 0xff;\n  }\n  return uint8.buffer;\n}\n/**\n * Uint32Array -> ArrayBuffer (big-endian os)\n */\nfunction i2abBig(buf) {\n  return buf.buffer;\n}\n/**\n * ArrayBuffer -> Uint32Array (low-endian os)\n */\nfunction ab2iLow(ab) {\n  const uint8 = new Uint8Array(ab);\n  const buf = new Uint32Array(uint8.length / 4);\n  for (let i = 0; i < uint8.length; i += 4) {\n    buf[i / 4] = uint8[i] << 24 ^ uint8[i + 1] << 16 ^ uint8[i + 2] << 8 ^ uint8[i + 3];\n  }\n  return buf;\n}\n/**\n * ArrayBuffer -> Uint32Array (big-endian os)\n */\nfunction ab2iBig(ab) {\n  return new Uint32Array(ab);\n}\nexports.isBigEndian = new Uint8Array(new Uint32Array([0x01020304]))[0] === 0x01;\nexports.i2ab = exports.isBigEndian ? i2abBig : i2abLow;\nexports.ab2i = exports.isBigEndian ? ab2iBig : ab2iLow;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}