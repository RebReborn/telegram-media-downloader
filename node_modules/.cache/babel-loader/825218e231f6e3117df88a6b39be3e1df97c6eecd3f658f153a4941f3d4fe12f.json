{"ast":null,"code":"/*! store2 - v2.14.4 - 2024-12-26\n* Copyright (c) 2024 Nathan Bubna; Licensed MIT */\n;\n(function (window, define) {\n  var _ = {\n    version: \"2.14.4\",\n    areas: {},\n    apis: {},\n    nsdelim: '.',\n    // utilities\n    inherit: function (api, o) {\n      for (var p in api) {\n        if (!o.hasOwnProperty(p)) {\n          Object.defineProperty(o, p, Object.getOwnPropertyDescriptor(api, p));\n        }\n      }\n      return o;\n    },\n    stringify: function (d, fn) {\n      return d === undefined || typeof d === \"function\" ? d + '' : JSON.stringify(d, fn || _.replace);\n    },\n    parse: function (s, fn) {\n      // if it doesn't parse, return as is\n      try {\n        return JSON.parse(s, fn || _.revive);\n      } catch (e) {\n        return s;\n      }\n    },\n    // extension hooks\n    fn: function (name, fn) {\n      _.storeAPI[name] = fn;\n      for (var api in _.apis) {\n        _.apis[api][name] = fn;\n      }\n    },\n    get: function (area, key) {\n      return area.getItem(key);\n    },\n    set: function (area, key, string) {\n      area.setItem(key, string);\n    },\n    remove: function (area, key) {\n      area.removeItem(key);\n    },\n    key: function (area, i) {\n      return area.key(i);\n    },\n    length: function (area) {\n      return area.length;\n    },\n    clear: function (area) {\n      area.clear();\n    },\n    // core functions\n    Store: function (id, area, namespace) {\n      var store = _.inherit(_.storeAPI, function (key, data, overwrite) {\n        if (arguments.length === 0) {\n          return store.getAll();\n        }\n        if (typeof data === \"function\") {\n          return store.transact(key, data, overwrite);\n        } // fn=data, alt=overwrite\n        if (data !== undefined) {\n          return store.set(key, data, overwrite);\n        }\n        if (typeof key === \"string\" || typeof key === \"number\") {\n          return store.get(key);\n        }\n        if (typeof key === \"function\") {\n          return store.each(key);\n        }\n        if (!key) {\n          return store.clear();\n        }\n        return store.setAll(key, data); // overwrite=data, data=key\n      });\n      store._id = id;\n      try {\n        var testKey = '__store2_test';\n        area.setItem(testKey, 'ok');\n        store._area = area;\n        area.removeItem(testKey);\n      } catch (e) {\n        store._area = _.storage('fake');\n      }\n      store._ns = namespace || '';\n      if (!_.areas[id]) {\n        _.areas[id] = store._area;\n      }\n      if (!_.apis[store._ns + store._id]) {\n        _.apis[store._ns + store._id] = store;\n      }\n      return store;\n    },\n    storeAPI: {\n      // admin functions\n      area: function (id, area) {\n        var store = this[id];\n        if (!store || !store.area) {\n          store = _.Store(id, area, this._ns); //new area-specific api in this namespace\n          if (!this[id]) {\n            this[id] = store;\n          }\n        }\n        return store;\n      },\n      namespace: function (namespace, singleArea, delim) {\n        delim = delim || this._delim || _.nsdelim;\n        if (!namespace) {\n          return this._ns ? this._ns.substring(0, this._ns.length - delim.length) : '';\n        }\n        var ns = namespace,\n          store = this[ns];\n        if (!store || !store.namespace) {\n          store = _.Store(this._id, this._area, this._ns + ns + delim); //new namespaced api\n          store._delim = delim;\n          if (!this[ns]) {\n            this[ns] = store;\n          }\n          if (!singleArea) {\n            for (var name in _.areas) {\n              store.area(name, _.areas[name]);\n            }\n          }\n        }\n        return store;\n      },\n      isFake: function (force) {\n        if (force) {\n          this._real = this._area;\n          this._area = _.storage('fake');\n        } else if (force === false) {\n          this._area = this._real || this._area;\n        }\n        return this._area.name === 'fake';\n      },\n      toString: function () {\n        return 'store' + (this._ns ? '.' + this.namespace() : '') + '[' + this._id + ']';\n      },\n      // storage functions\n      has: function (key) {\n        if (this._area.has) {\n          return this._area.has(this._in(key)); //extension hook\n        }\n        return !!(this._in(key) in this._area);\n      },\n      size: function () {\n        return this.keys().length;\n      },\n      each: function (fn, fill) {\n        // fill is used by keys(fillList) and getAll(fillList))\n        for (var i = 0, m = _.length(this._area); i < m; i++) {\n          var key = this._out(_.key(this._area, i));\n          if (key !== undefined) {\n            if (fn.call(this, key, this.get(key), fill) === false) {\n              break;\n            }\n          }\n          if (m > _.length(this._area)) {\n            m--;\n            i--;\n          } // in case of removeItem\n        }\n        return fill || this;\n      },\n      keys: function (fillList) {\n        return this.each(function (k, v, list) {\n          list.push(k);\n        }, fillList || []);\n      },\n      get: function (key, alt) {\n        var s = _.get(this._area, this._in(key)),\n          fn;\n        if (typeof alt === \"function\") {\n          fn = alt;\n          alt = null;\n        }\n        return s !== null ? _.parse(s, fn) : alt != null ? alt : s;\n      },\n      getAll: function (fillObj) {\n        return this.each(function (k, v, all) {\n          all[k] = v;\n        }, fillObj || {});\n      },\n      transact: function (key, fn, alt) {\n        var val = this.get(key, alt),\n          ret = fn(val);\n        this.set(key, ret === undefined ? val : ret);\n        return this;\n      },\n      set: function (key, data, overwrite) {\n        var d = this.get(key),\n          replacer;\n        if (d != null && overwrite === false) {\n          return data;\n        }\n        if (typeof overwrite === \"function\") {\n          replacer = overwrite;\n          overwrite = undefined;\n        }\n        return _.set(this._area, this._in(key), _.stringify(data, replacer), overwrite) || d;\n      },\n      setAll: function (data, overwrite) {\n        var changed, val;\n        for (var key in data) {\n          val = data[key];\n          if (this.set(key, val, overwrite) !== val) {\n            changed = true;\n          }\n        }\n        return changed;\n      },\n      add: function (key, data, replacer) {\n        var d = this.get(key);\n        if (d instanceof Array) {\n          data = d.concat(data);\n        } else if (d !== null) {\n          var type = typeof d;\n          if (type === typeof data && type === 'object') {\n            for (var k in data) {\n              d[k] = data[k];\n            }\n            data = d;\n          } else {\n            data = d + data;\n          }\n        }\n        _.set(this._area, this._in(key), _.stringify(data, replacer));\n        return data;\n      },\n      remove: function (key, alt) {\n        var d = this.get(key, alt);\n        _.remove(this._area, this._in(key));\n        return d;\n      },\n      clear: function () {\n        if (!this._ns) {\n          _.clear(this._area);\n        } else {\n          this.each(function (k) {\n            _.remove(this._area, this._in(k));\n          }, 1);\n        }\n        return this;\n      },\n      clearAll: function () {\n        var area = this._area;\n        for (var id in _.areas) {\n          if (_.areas.hasOwnProperty(id)) {\n            this._area = _.areas[id];\n            this.clear();\n          }\n        }\n        this._area = area;\n        return this;\n      },\n      // internal use functions\n      _in: function (k) {\n        if (typeof k !== \"string\") {\n          k = _.stringify(k);\n        }\n        return this._ns ? this._ns + k : k;\n      },\n      _out: function (k) {\n        return this._ns ? k && k.indexOf(this._ns) === 0 ? k.substring(this._ns.length) : undefined :\n        // so each() knows to skip it\n        k;\n      }\n    },\n    // end _.storeAPI\n    storage: function (name) {\n      return _.inherit(_.storageAPI, {\n        items: {},\n        name: name\n      });\n    },\n    storageAPI: {\n      length: 0,\n      has: function (k) {\n        return this.items.hasOwnProperty(k);\n      },\n      key: function (i) {\n        var c = 0;\n        for (var k in this.items) {\n          if (this.has(k) && i === c++) {\n            return k;\n          }\n        }\n      },\n      setItem: function (k, v) {\n        if (!this.has(k)) {\n          this.length++;\n        }\n        this.items[k] = v;\n      },\n      removeItem: function (k) {\n        if (this.has(k)) {\n          delete this.items[k];\n          this.length--;\n        }\n      },\n      getItem: function (k) {\n        return this.has(k) ? this.items[k] : null;\n      },\n      clear: function () {\n        for (var k in this.items) {\n          this.removeItem(k);\n        }\n      }\n    } // end _.storageAPI\n  };\n  var store =\n  // safely set this up (throws error in IE10/32bit mode for local files)\n  _.Store(\"local\", function () {\n    try {\n      return localStorage;\n    } catch (e) {}\n  }());\n  store.local = store; // for completeness\n  store._ = _; // for extenders and debuggers...\n  // safely setup store.session (throws exception in FF for file:/// urls)\n  store.area(\"session\", function () {\n    try {\n      return sessionStorage;\n    } catch (e) {}\n  }());\n  store.area(\"page\", _.storage(\"page\"));\n  if (typeof define === 'function' && define.amd !== undefined) {\n    define('store2', [], function () {\n      return store;\n    });\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = store;\n  } else {\n    // expose the primary store fn to the global object and save conflicts\n    if (window.store) {\n      _.conflict = window.store;\n    }\n    window.store = store;\n  }\n})(this, this && this.define);","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}