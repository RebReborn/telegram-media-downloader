{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HTMLParser = void 0;\nconst htmlparser2_1 = require(\"htmlparser2\");\nconst tl_1 = require(\"../tl\");\nconst index_1 = require(\"../index\");\nclass HTMLToTelegramParser {\n  constructor() {\n    this.text = \"\";\n    this.entities = [];\n    this._buildingEntities = new Map();\n    this._openTags = [];\n    this._openTagsMeta = [];\n  }\n  onopentag(name, attributes) {\n    /*\n     * This fires when a new tag is opened.\n     *\n     * If you don't need an aggregated `attributes` object,\n     * have a look at the `onopentagname` and `onattribute` events.\n     */\n    this._openTags.unshift(name);\n    this._openTagsMeta.unshift(undefined);\n    let EntityType;\n    const args = {};\n    if (name == \"strong\" || name == \"b\") {\n      EntityType = tl_1.Api.MessageEntityBold;\n    } else if (name == \"spoiler\") {\n      EntityType = tl_1.Api.MessageEntitySpoiler;\n    } else if (name == \"em\" || name == \"i\") {\n      EntityType = tl_1.Api.MessageEntityItalic;\n    } else if (name == \"u\") {\n      EntityType = tl_1.Api.MessageEntityUnderline;\n    } else if (name == \"del\" || name == \"s\") {\n      EntityType = tl_1.Api.MessageEntityStrike;\n    } else if (name == \"blockquote\") {\n      EntityType = tl_1.Api.MessageEntityBlockquote;\n      if (attributes.expandable !== undefined) {\n        args.collapsed = true;\n      }\n    } else if (name == \"code\") {\n      const pre = this._buildingEntities.get(\"pre\");\n      if (pre && pre instanceof tl_1.Api.MessageEntityPre) {\n        try {\n          pre.language = attributes.class.slice(\"language-\".length, attributes.class.length);\n        } catch (e) {\n          // no language block\n        }\n      } else {\n        EntityType = tl_1.Api.MessageEntityCode;\n      }\n    } else if (name == \"pre\") {\n      EntityType = tl_1.Api.MessageEntityPre;\n      args[\"language\"] = \"\";\n    } else if (name == \"a\") {\n      let url = attributes.href;\n      if (!url) {\n        return;\n      }\n      if (url.startsWith(\"mailto:\")) {\n        url = url.slice(\"mailto:\".length, url.length);\n        EntityType = tl_1.Api.MessageEntityEmail;\n      } else {\n        EntityType = tl_1.Api.MessageEntityTextUrl;\n        args[\"url\"] = url;\n        url = undefined;\n      }\n      this._openTagsMeta.shift();\n      this._openTagsMeta.unshift(url);\n    } else if (name == \"tg-emoji\") {\n      EntityType = tl_1.Api.MessageEntityCustomEmoji;\n      args[\"documentId\"] = attributes[\"emoji-id\"];\n    }\n    if (EntityType && !this._buildingEntities.has(name)) {\n      this._buildingEntities.set(name, new EntityType(Object.assign({\n        offset: this.text.length,\n        length: 0\n      }, args)));\n    }\n  }\n  ontext(text) {\n    const previousTag = this._openTags.length > 0 ? this._openTags[0] : \"\";\n    if (previousTag == \"a\") {\n      const url = this._openTagsMeta[0];\n      if (url) {\n        text = url;\n      }\n    }\n    for (let [tag, entity] of this._buildingEntities) {\n      entity.length += text.length;\n    }\n    this.text += text;\n  }\n  onclosetag(tagname) {\n    this._openTagsMeta.shift();\n    this._openTags.shift();\n    const entity = this._buildingEntities.get(tagname);\n    if (entity) {\n      this._buildingEntities.delete(tagname);\n      this.entities.push(entity);\n    }\n  }\n  onattribute(name, value, quote) {}\n  oncdataend() {}\n  oncdatastart() {}\n  oncomment(data) {}\n  oncommentend() {}\n  onend() {}\n  onerror(error) {}\n  onopentagname(name) {}\n  onparserinit(parser) {}\n  onprocessinginstruction(name, data) {}\n  onreset() {}\n}\nclass HTMLParser {\n  static parse(html) {\n    if (!html) {\n      return [html, []];\n    }\n    const handler = new HTMLToTelegramParser();\n    const parser = new htmlparser2_1.Parser(handler);\n    parser.write(html);\n    parser.end();\n    const text = index_1.helpers.stripText(handler.text, handler.entities);\n    return [text, handler.entities];\n  }\n  static unparse(text, entities, _offset = 0, _length) {\n    if (!text || !entities || !entities.length) {\n      return text;\n    }\n    if (_length == undefined) {\n      _length = text.length;\n    }\n    const html = [];\n    let lastOffset = 0;\n    for (let i = 0; i < entities.length; i++) {\n      const entity = entities[i];\n      if (entity.offset >= _offset + _length) {\n        break;\n      }\n      let relativeOffset = entity.offset - _offset;\n      if (relativeOffset > lastOffset) {\n        html.push(text.slice(lastOffset, relativeOffset));\n      } else if (relativeOffset < lastOffset) {\n        continue;\n      }\n      let skipEntity = false;\n      let length = entity.length;\n      let entityText = this.unparse(text.slice(relativeOffset, relativeOffset + length), entities.slice(i + 1, entities.length), entity.offset, length);\n      if (entity instanceof tl_1.Api.MessageEntityBold) {\n        html.push(`<strong>${entityText}</strong>`);\n      } else if (entity instanceof tl_1.Api.MessageEntitySpoiler) {\n        html.push(`<spoiler>${entityText}</spoiler>`);\n      } else if (entity instanceof tl_1.Api.MessageEntityItalic) {\n        html.push(`<em>${entityText}</em>`);\n      } else if (entity instanceof tl_1.Api.MessageEntityCode) {\n        html.push(`<code>${entityText}</code>`);\n      } else if (entity instanceof tl_1.Api.MessageEntityUnderline) {\n        html.push(`<u>${entityText}</u>`);\n      } else if (entity instanceof tl_1.Api.MessageEntityStrike) {\n        html.push(`<del>${entityText}</del>`);\n      } else if (entity instanceof tl_1.Api.MessageEntityBlockquote) {\n        html.push(`<blockquote>${entityText}</blockquote>`);\n      } else if (entity instanceof tl_1.Api.MessageEntityPre) {\n        if (entity.language) {\n          html.push(`<pre><code class=\"language-${entity.language}\">${entityText}</code></pre>`);\n        } else {\n          html.push(`<pre>${entityText}</pre>`);\n        }\n      } else if (entity instanceof tl_1.Api.MessageEntityEmail) {\n        html.push(`<a href=\"mailto:${entityText}\">${entityText}</a>`);\n      } else if (entity instanceof tl_1.Api.MessageEntityUrl) {\n        html.push(`<a href=\"${entityText}\">${entityText}</a>`);\n      } else if (entity instanceof tl_1.Api.MessageEntityTextUrl) {\n        html.push(`<a href=\"${entity.url}\">${entityText}</a>`);\n      } else if (entity instanceof tl_1.Api.MessageEntityMentionName) {\n        html.push(`<a href=\"tg://user?id=${entity.userId}\">${entityText}</a>`);\n      } else if (entity instanceof tl_1.Api.MessageEntityCustomEmoji) {\n        html.push(`<tg-emoji emoji-id=\"${entity.documentId}\">${entityText}</tg-emoji>`);\n      } else {\n        skipEntity = true;\n      }\n      lastOffset = relativeOffset + (skipEntity ? 0 : length);\n    }\n    html.push(text.slice(lastOffset, text.length));\n    return html.join(\"\");\n  }\n}\nexports.HTMLParser = HTMLParser;","map":{"version":3,"names":["Object","defineProperty","exports","value","HTMLParser","htmlparser2_1","require","tl_1","index_1","HTMLToTelegramParser","constructor","text","entities","_buildingEntities","Map","_openTags","_openTagsMeta","onopentag","name","attributes","unshift","undefined","EntityType","args","Api","MessageEntityBold","MessageEntitySpoiler","MessageEntityItalic","MessageEntityUnderline","MessageEntityStrike","MessageEntityBlockquote","expandable","collapsed","pre","get","MessageEntityPre","language","class","slice","length","e","MessageEntityCode","url","href","startsWith","MessageEntityEmail","MessageEntityTextUrl","shift","MessageEntityCustomEmoji","has","set","assign","offset","ontext","previousTag","tag","entity","onclosetag","tagname","delete","push","onattribute","quote","oncdataend","oncdatastart","oncomment","data","oncommentend","onend","onerror","error","onopentagname","onparserinit","parser","onprocessinginstruction","onreset","parse","html","handler","Parser","write","end","helpers","stripText","unparse","_offset","_length","lastOffset","i","relativeOffset","skipEntity","entityText","MessageEntityUrl","MessageEntityMentionName","userId","documentId","join"],"sources":["C:/Users/Rodrick/Documents/telegram-media-downloader/node_modules/telegram/extensions/html.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HTMLParser = void 0;\nconst htmlparser2_1 = require(\"htmlparser2\");\nconst tl_1 = require(\"../tl\");\nconst index_1 = require(\"../index\");\nclass HTMLToTelegramParser {\n    constructor() {\n        this.text = \"\";\n        this.entities = [];\n        this._buildingEntities = new Map();\n        this._openTags = [];\n        this._openTagsMeta = [];\n    }\n    onopentag(name, attributes) {\n        /*\n         * This fires when a new tag is opened.\n         *\n         * If you don't need an aggregated `attributes` object,\n         * have a look at the `onopentagname` and `onattribute` events.\n         */\n        this._openTags.unshift(name);\n        this._openTagsMeta.unshift(undefined);\n        let EntityType;\n        const args = {};\n        if (name == \"strong\" || name == \"b\") {\n            EntityType = tl_1.Api.MessageEntityBold;\n        }\n        else if (name == \"spoiler\") {\n            EntityType = tl_1.Api.MessageEntitySpoiler;\n        }\n        else if (name == \"em\" || name == \"i\") {\n            EntityType = tl_1.Api.MessageEntityItalic;\n        }\n        else if (name == \"u\") {\n            EntityType = tl_1.Api.MessageEntityUnderline;\n        }\n        else if (name == \"del\" || name == \"s\") {\n            EntityType = tl_1.Api.MessageEntityStrike;\n        }\n        else if (name == \"blockquote\") {\n            EntityType = tl_1.Api.MessageEntityBlockquote;\n            if (attributes.expandable !== undefined) {\n                args.collapsed = true;\n            }\n        }\n        else if (name == \"code\") {\n            const pre = this._buildingEntities.get(\"pre\");\n            if (pre && pre instanceof tl_1.Api.MessageEntityPre) {\n                try {\n                    pre.language = attributes.class.slice(\"language-\".length, attributes.class.length);\n                }\n                catch (e) {\n                    // no language block\n                }\n            }\n            else {\n                EntityType = tl_1.Api.MessageEntityCode;\n            }\n        }\n        else if (name == \"pre\") {\n            EntityType = tl_1.Api.MessageEntityPre;\n            args[\"language\"] = \"\";\n        }\n        else if (name == \"a\") {\n            let url = attributes.href;\n            if (!url) {\n                return;\n            }\n            if (url.startsWith(\"mailto:\")) {\n                url = url.slice(\"mailto:\".length, url.length);\n                EntityType = tl_1.Api.MessageEntityEmail;\n            }\n            else {\n                EntityType = tl_1.Api.MessageEntityTextUrl;\n                args[\"url\"] = url;\n                url = undefined;\n            }\n            this._openTagsMeta.shift();\n            this._openTagsMeta.unshift(url);\n        }\n        else if (name == \"tg-emoji\") {\n            EntityType = tl_1.Api.MessageEntityCustomEmoji;\n            args[\"documentId\"] = attributes[\"emoji-id\"];\n        }\n        if (EntityType && !this._buildingEntities.has(name)) {\n            this._buildingEntities.set(name, new EntityType(Object.assign({ offset: this.text.length, length: 0 }, args)));\n        }\n    }\n    ontext(text) {\n        const previousTag = this._openTags.length > 0 ? this._openTags[0] : \"\";\n        if (previousTag == \"a\") {\n            const url = this._openTagsMeta[0];\n            if (url) {\n                text = url;\n            }\n        }\n        for (let [tag, entity] of this._buildingEntities) {\n            entity.length += text.length;\n        }\n        this.text += text;\n    }\n    onclosetag(tagname) {\n        this._openTagsMeta.shift();\n        this._openTags.shift();\n        const entity = this._buildingEntities.get(tagname);\n        if (entity) {\n            this._buildingEntities.delete(tagname);\n            this.entities.push(entity);\n        }\n    }\n    onattribute(name, value, quote) { }\n    oncdataend() { }\n    oncdatastart() { }\n    oncomment(data) { }\n    oncommentend() { }\n    onend() { }\n    onerror(error) { }\n    onopentagname(name) { }\n    onparserinit(parser) { }\n    onprocessinginstruction(name, data) { }\n    onreset() { }\n}\nclass HTMLParser {\n    static parse(html) {\n        if (!html) {\n            return [html, []];\n        }\n        const handler = new HTMLToTelegramParser();\n        const parser = new htmlparser2_1.Parser(handler);\n        parser.write(html);\n        parser.end();\n        const text = index_1.helpers.stripText(handler.text, handler.entities);\n        return [text, handler.entities];\n    }\n    static unparse(text, entities, _offset = 0, _length) {\n        if (!text || !entities || !entities.length) {\n            return text;\n        }\n        if (_length == undefined) {\n            _length = text.length;\n        }\n        const html = [];\n        let lastOffset = 0;\n        for (let i = 0; i < entities.length; i++) {\n            const entity = entities[i];\n            if (entity.offset >= _offset + _length) {\n                break;\n            }\n            let relativeOffset = entity.offset - _offset;\n            if (relativeOffset > lastOffset) {\n                html.push(text.slice(lastOffset, relativeOffset));\n            }\n            else if (relativeOffset < lastOffset) {\n                continue;\n            }\n            let skipEntity = false;\n            let length = entity.length;\n            let entityText = this.unparse(text.slice(relativeOffset, relativeOffset + length), entities.slice(i + 1, entities.length), entity.offset, length);\n            if (entity instanceof tl_1.Api.MessageEntityBold) {\n                html.push(`<strong>${entityText}</strong>`);\n            }\n            else if (entity instanceof tl_1.Api.MessageEntitySpoiler) {\n                html.push(`<spoiler>${entityText}</spoiler>`);\n            }\n            else if (entity instanceof tl_1.Api.MessageEntityItalic) {\n                html.push(`<em>${entityText}</em>`);\n            }\n            else if (entity instanceof tl_1.Api.MessageEntityCode) {\n                html.push(`<code>${entityText}</code>`);\n            }\n            else if (entity instanceof tl_1.Api.MessageEntityUnderline) {\n                html.push(`<u>${entityText}</u>`);\n            }\n            else if (entity instanceof tl_1.Api.MessageEntityStrike) {\n                html.push(`<del>${entityText}</del>`);\n            }\n            else if (entity instanceof tl_1.Api.MessageEntityBlockquote) {\n                html.push(`<blockquote>${entityText}</blockquote>`);\n            }\n            else if (entity instanceof tl_1.Api.MessageEntityPre) {\n                if (entity.language) {\n                    html.push(`<pre><code class=\"language-${entity.language}\">${entityText}</code></pre>`);\n                }\n                else {\n                    html.push(`<pre>${entityText}</pre>`);\n                }\n            }\n            else if (entity instanceof tl_1.Api.MessageEntityEmail) {\n                html.push(`<a href=\"mailto:${entityText}\">${entityText}</a>`);\n            }\n            else if (entity instanceof tl_1.Api.MessageEntityUrl) {\n                html.push(`<a href=\"${entityText}\">${entityText}</a>`);\n            }\n            else if (entity instanceof tl_1.Api.MessageEntityTextUrl) {\n                html.push(`<a href=\"${entity.url}\">${entityText}</a>`);\n            }\n            else if (entity instanceof tl_1.Api.MessageEntityMentionName) {\n                html.push(`<a href=\"tg://user?id=${entity.userId}\">${entityText}</a>`);\n            }\n            else if (entity instanceof tl_1.Api.MessageEntityCustomEmoji) {\n                html.push(`<tg-emoji emoji-id=\"${entity.documentId}\">${entityText}</tg-emoji>`);\n            }\n            else {\n                skipEntity = true;\n            }\n            lastOffset = relativeOffset + (skipEntity ? 0 : length);\n        }\n        html.push(text.slice(lastOffset, text.length));\n        return html.join(\"\");\n    }\n}\nexports.HTMLParser = HTMLParser;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}