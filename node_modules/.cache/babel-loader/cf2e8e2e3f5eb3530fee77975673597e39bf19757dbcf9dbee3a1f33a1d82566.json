{"ast":null,"code":"\"use strict\";\n\n// Which updates have the following fields?\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EntityCache = void 0;\nconst Utils_1 = require(\"./Utils\");\nconst Helpers_1 = require(\"./Helpers\");\nconst tl_1 = require(\"./tl\");\nconst big_integer_1 = __importDefault(require(\"big-integer\"));\nclass EntityCache {\n  constructor() {\n    this.cacheMap = new Map();\n  }\n  add(entities) {\n    const temp = [];\n    if (!(0, Helpers_1.isArrayLike)(entities)) {\n      if (entities != undefined) {\n        if (typeof entities == \"object\") {\n          if (\"chats\" in entities) {\n            temp.push(...entities.chats);\n          }\n          if (\"users\" in entities) {\n            temp.push(...entities.users);\n          }\n          if (\"user\" in entities) {\n            temp.push(entities.user);\n          }\n        }\n      }\n      if (temp.length) {\n        entities = temp;\n      } else {\n        return;\n      }\n    }\n    for (const entity of entities) {\n      try {\n        const pid = (0, Utils_1.getPeerId)(entity);\n        if (!this.cacheMap.has(pid.toString())) {\n          this.cacheMap.set(pid.toString(), (0, Utils_1.getInputPeer)(entity));\n        }\n      } catch (e) {}\n    }\n  }\n  get(item) {\n    if (item == undefined) {\n      throw new Error(\"No cached entity for the given key\");\n    }\n    item = (0, Helpers_1.returnBigInt)(item);\n    if (item.lesser(big_integer_1.default.zero)) {\n      let res;\n      try {\n        res = this.cacheMap.get((0, Utils_1.getPeerId)(item).toString());\n        if (res) {\n          return res;\n        }\n      } catch (e) {\n        throw new Error(\"Invalid key will not have entity\");\n      }\n    }\n    for (const cls of [tl_1.Api.PeerUser, tl_1.Api.PeerChat, tl_1.Api.PeerChannel]) {\n      const result = this.cacheMap.get((0, Utils_1.getPeerId)(new cls({\n        userId: item,\n        chatId: item,\n        channelId: item\n      })).toString());\n      if (result) {\n        return result;\n      }\n    }\n    throw new Error(\"No cached entity for the given key\");\n  }\n}\nexports.EntityCache = EntityCache;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}