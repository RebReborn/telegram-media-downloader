{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectionTCPObfuscated = void 0;\nconst Helpers_1 = require(\"../../Helpers\");\nconst Connection_1 = require(\"./Connection\");\nconst TCPAbridged_1 = require(\"./TCPAbridged\");\nconst CTR_1 = require(\"../../crypto/CTR\");\nclass ObfuscatedIO {\n  constructor(connection) {\n    this.header = undefined;\n    this.connection = connection.socket;\n    this._packetClass = connection.PacketCodecClass;\n  }\n  async initHeader() {\n    // Obfuscated messages secrets cannot start with any of these\n    const keywords = [Buffer.from(\"50567247\", \"hex\"), Buffer.from(\"474554\", \"hex\"), Buffer.from(\"504f5354\", \"hex\"), Buffer.from(\"eeeeeeee\", \"hex\")];\n    let random;\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      random = (0, Helpers_1.generateRandomBytes)(64);\n      if (random[0] !== 0xef && !random.slice(4, 8).equals(Buffer.alloc(4))) {\n        let ok = true;\n        for (const key of keywords) {\n          if (key.equals(random.slice(0, 4))) {\n            ok = false;\n            break;\n          }\n        }\n        if (ok) {\n          break;\n        }\n      }\n    }\n    random = random.toJSON().data;\n    const randomReversed = Buffer.from(random.slice(8, 56)).reverse();\n    // Encryption has \"continuous buffer\" enabled\n    const encryptKey = Buffer.from(random.slice(8, 40));\n    const encryptIv = Buffer.from(random.slice(40, 56));\n    const decryptKey = Buffer.from(randomReversed.slice(0, 32));\n    const decryptIv = Buffer.from(randomReversed.slice(32, 48));\n    const encryptor = new CTR_1.CTR(encryptKey, encryptIv);\n    const decryptor = new CTR_1.CTR(decryptKey, decryptIv);\n    random = Buffer.concat([Buffer.from(random.slice(0, 56)), this._packetClass.obfuscateTag, Buffer.from(random.slice(60))]);\n    random = Buffer.concat([Buffer.from(random.slice(0, 56)), Buffer.from(encryptor.encrypt(random).slice(56, 64)), Buffer.from(random.slice(64))]);\n    this.header = random;\n    this._encrypt = encryptor;\n    this._decrypt = decryptor;\n  }\n  async read(n) {\n    const data = await this.connection.readExactly(n);\n    return this._decrypt.encrypt(data);\n  }\n  write(data) {\n    this.connection.write(this._encrypt.encrypt(data));\n  }\n}\nclass ConnectionTCPObfuscated extends Connection_1.ObfuscatedConnection {\n  constructor() {\n    super(...arguments);\n    this.ObfuscatedIO = ObfuscatedIO;\n    this.PacketCodecClass = TCPAbridged_1.AbridgedPacketCodec;\n  }\n}\nexports.ConnectionTCPObfuscated = ConnectionTCPObfuscated;","map":{"version":3,"names":["Object","defineProperty","exports","value","ConnectionTCPObfuscated","Helpers_1","require","Connection_1","TCPAbridged_1","CTR_1","ObfuscatedIO","constructor","connection","header","undefined","socket","_packetClass","PacketCodecClass","initHeader","keywords","Buffer","from","random","generateRandomBytes","slice","equals","alloc","ok","key","toJSON","data","randomReversed","reverse","encryptKey","encryptIv","decryptKey","decryptIv","encryptor","CTR","decryptor","concat","obfuscateTag","encrypt","_encrypt","_decrypt","read","n","readExactly","write","ObfuscatedConnection","arguments","AbridgedPacketCodec"],"sources":["C:/Users/Rodrick/Documents/telegram-media-downloader/node_modules/telegram/network/connection/TCPObfuscated.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConnectionTCPObfuscated = void 0;\nconst Helpers_1 = require(\"../../Helpers\");\nconst Connection_1 = require(\"./Connection\");\nconst TCPAbridged_1 = require(\"./TCPAbridged\");\nconst CTR_1 = require(\"../../crypto/CTR\");\nclass ObfuscatedIO {\n    constructor(connection) {\n        this.header = undefined;\n        this.connection = connection.socket;\n        this._packetClass = connection.PacketCodecClass;\n    }\n    async initHeader() {\n        // Obfuscated messages secrets cannot start with any of these\n        const keywords = [\n            Buffer.from(\"50567247\", \"hex\"),\n            Buffer.from(\"474554\", \"hex\"),\n            Buffer.from(\"504f5354\", \"hex\"),\n            Buffer.from(\"eeeeeeee\", \"hex\"),\n        ];\n        let random;\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            random = (0, Helpers_1.generateRandomBytes)(64);\n            if (random[0] !== 0xef &&\n                !random.slice(4, 8).equals(Buffer.alloc(4))) {\n                let ok = true;\n                for (const key of keywords) {\n                    if (key.equals(random.slice(0, 4))) {\n                        ok = false;\n                        break;\n                    }\n                }\n                if (ok) {\n                    break;\n                }\n            }\n        }\n        random = random.toJSON().data;\n        const randomReversed = Buffer.from(random.slice(8, 56)).reverse();\n        // Encryption has \"continuous buffer\" enabled\n        const encryptKey = Buffer.from(random.slice(8, 40));\n        const encryptIv = Buffer.from(random.slice(40, 56));\n        const decryptKey = Buffer.from(randomReversed.slice(0, 32));\n        const decryptIv = Buffer.from(randomReversed.slice(32, 48));\n        const encryptor = new CTR_1.CTR(encryptKey, encryptIv);\n        const decryptor = new CTR_1.CTR(decryptKey, decryptIv);\n        random = Buffer.concat([\n            Buffer.from(random.slice(0, 56)),\n            this._packetClass.obfuscateTag,\n            Buffer.from(random.slice(60)),\n        ]);\n        random = Buffer.concat([\n            Buffer.from(random.slice(0, 56)),\n            Buffer.from(encryptor.encrypt(random).slice(56, 64)),\n            Buffer.from(random.slice(64)),\n        ]);\n        this.header = random;\n        this._encrypt = encryptor;\n        this._decrypt = decryptor;\n    }\n    async read(n) {\n        const data = await this.connection.readExactly(n);\n        return this._decrypt.encrypt(data);\n    }\n    write(data) {\n        this.connection.write(this._encrypt.encrypt(data));\n    }\n}\nclass ConnectionTCPObfuscated extends Connection_1.ObfuscatedConnection {\n    constructor() {\n        super(...arguments);\n        this.ObfuscatedIO = ObfuscatedIO;\n        this.PacketCodecClass = TCPAbridged_1.AbridgedPacketCodec;\n    }\n}\nexports.ConnectionTCPObfuscated = ConnectionTCPObfuscated;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}