{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Button = void 0;\nconst api_1 = require(\"../api\");\nconst __1 = require(\"../../\");\nconst Helpers_1 = require(\"../../Helpers\");\nconst inspect_1 = require(\"../../inspect\");\nclass Button {\n  [inspect_1.inspect.custom]() {\n    return (0, Helpers_1.betterConsoleLog)(this);\n  }\n  constructor(button, resize, singleUse, selective) {\n    this.button = button;\n    this.resize = resize;\n    this.singleUse = singleUse;\n    this.selective = selective;\n  }\n  static _isInline(button) {\n    return button instanceof api_1.Api.KeyboardButtonCallback || button instanceof api_1.Api.KeyboardButtonSwitchInline || button instanceof api_1.Api.KeyboardButtonUrl || button instanceof api_1.Api.KeyboardButtonUrlAuth || button instanceof api_1.Api.InputKeyboardButtonUrlAuth;\n  }\n  static inline(text, data) {\n    if (!data) {\n      data = Buffer.from(text, \"utf-8\");\n    }\n    if (data.length > 64) {\n      throw new Error(\"Too many bytes for the data\");\n    }\n    return new api_1.Api.KeyboardButtonCallback({\n      text: text,\n      data: data\n    });\n  }\n  static switchInline(text) {\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    let samePeer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    return new api_1.Api.KeyboardButtonSwitchInline({\n      text,\n      query,\n      samePeer\n    });\n  }\n  static url(text, url) {\n    return new api_1.Api.KeyboardButtonUrl({\n      text: text,\n      url: url || text\n    });\n  }\n  static auth(text, url, bot, writeAccess, fwdText) {\n    return new api_1.Api.InputKeyboardButtonUrlAuth({\n      text,\n      url: url || text,\n      bot: __1.utils.getInputUser(bot || new api_1.Api.InputUserSelf()),\n      requestWriteAccess: writeAccess,\n      fwdText: fwdText\n    });\n  }\n  static text(text, resize, singleUse, selective) {\n    return new this(new api_1.Api.KeyboardButton({\n      text\n    }), resize, singleUse, selective);\n  }\n  static requestLocation(text, resize, singleUse, selective) {\n    return new this(new api_1.Api.KeyboardButtonRequestGeoLocation({\n      text\n    }), resize, singleUse, selective);\n  }\n  static requestPhone(text, resize, singleUse, selective) {\n    return new this(new api_1.Api.KeyboardButtonRequestPhone({\n      text\n    }), resize, singleUse, selective);\n  }\n  static requestPoll(text, resize, singleUse, selective) {\n    return new this(new api_1.Api.KeyboardButtonRequestPoll({\n      text\n    }), resize, singleUse, selective);\n  }\n  static clear() {\n    return new api_1.Api.ReplyKeyboardHide({});\n  }\n  static forceReply() {\n    return new api_1.Api.ReplyKeyboardForceReply({});\n  }\n}\nexports.Button = Button;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}