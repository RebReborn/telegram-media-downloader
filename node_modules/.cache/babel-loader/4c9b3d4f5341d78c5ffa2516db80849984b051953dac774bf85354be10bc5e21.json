{"ast":null,"code":"\"use strict\";\n\n/**\n * Errors not related to the Telegram API itself\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BadMessageError = exports.CdnFileTamperedError = exports.SecurityError = exports.InvalidBufferError = exports.InvalidChecksumError = exports.TypeNotFoundError = exports.ReadCancelledError = void 0;\n/**\n * Occurs when a read operation was cancelled.\n */\nclass ReadCancelledError extends Error {\n  constructor() {\n    super(\"The read operation was cancelled.\");\n  }\n}\nexports.ReadCancelledError = ReadCancelledError;\n/**\n * Occurs when a type is not found, for example,\n * when trying to read a TLObject with an invalid constructor code.\n */\nclass TypeNotFoundError extends Error {\n  constructor(invalidConstructorId, remaining) {\n    super(`Could not find a matching Constructor ID for the TLObject that was supposed to be\n        read with ID ${invalidConstructorId}. Most likely, a TLObject was trying to be read when\n         it should not be read. Remaining bytes: ${remaining.length}`);\n    if (typeof alert !== \"undefined\") {\n      alert(`Missing MTProto Entity: Please, make sure to add TL definition for ID ${invalidConstructorId}`);\n    }\n    this.invalidConstructorId = invalidConstructorId;\n    this.remaining = remaining;\n  }\n}\nexports.TypeNotFoundError = TypeNotFoundError;\n/**\n * Occurs when using the TCP full mode and the checksum of a received\n * packet doesn't match the expected checksum.\n */\nclass InvalidChecksumError extends Error {\n  constructor(checksum, validChecksum) {\n    super(`Invalid checksum (${checksum} when ${validChecksum} was expected). This packet should be skipped.`);\n    this.checksum = checksum;\n    this.validChecksum = validChecksum;\n  }\n}\nexports.InvalidChecksumError = InvalidChecksumError;\n/**\n * Occurs when the buffer is invalid, and may contain an HTTP error code.\n * For instance, 404 means \"forgotten/broken authorization key\", while\n */\nclass InvalidBufferError extends Error {\n  constructor(payload) {\n    let code = undefined;\n    if (payload.length === 4) {\n      code = -payload.readInt32LE(0);\n      super(`Invalid response buffer (HTTP code ${code})`);\n    } else {\n      super(`Invalid response buffer (too short ${payload})`);\n    }\n    this.code = code;\n    this.payload = payload;\n  }\n}\nexports.InvalidBufferError = InvalidBufferError;\n/**\n * Generic security error, mostly used when generating a new AuthKey.\n */\nclass SecurityError extends Error {\n  constructor(...args) {\n    if (!args.length) {\n      args = [\"A security check failed.\"];\n    }\n    super(...args);\n  }\n}\nexports.SecurityError = SecurityError;\n/**\n * Occurs when there's a hash mismatch between the decrypted CDN file\n * and its expected hash.\n */\nclass CdnFileTamperedError extends SecurityError {\n  constructor() {\n    super(\"The CDN file has been altered and its download cancelled.\");\n  }\n}\nexports.CdnFileTamperedError = CdnFileTamperedError;\n/**\n * Occurs when handling a badMessageNotification\n */\nclass BadMessageError extends Error {\n  constructor(request, code) {\n    let errorMessage = BadMessageError.ErrorMessages[code] || `Unknown error code (this should not happen): ${code}.`;\n    errorMessage += `  Caused by ${request.className}`;\n    super(errorMessage);\n    this.errorMessage = errorMessage;\n    this.code = code;\n  }\n}\nexports.BadMessageError = BadMessageError;\nBadMessageError.ErrorMessages = {\n  16: \"msg_id too low (most likely, client time is wrong it would be worthwhile to \" + \"synchronize it using msg_id notifications and re-send the original message \" + \"with the “correct” msg_id or wrap it in a container with a new msg_id if the \" + \"original message had waited too long on the client to be transmitted).\",\n  17: \"msg_id too high (similar to the previous case, the client time has to be \" + \"synchronized, and the message re-sent with the correct msg_id).\",\n  18: \"Incorrect two lower order msg_id bits (the server expects client message msg_id \" + \"to be divisible by 4).\",\n  19: \"Container msg_id is the same as msg_id of a previously received message \" + \"(this must never happen).\",\n  20: \"Message too old, and it cannot be verified whether the server has received a \" + \"message with this msg_id or not.\",\n  32: \"msg_seqno too low (the server has already received a message with a lower \" + \"msg_id but with either a higher or an equal and odd seqno).\",\n  33: \"msg_seqno too high (similarly, there is a message with a higher msg_id but with \" + \"either a lower or an equal and odd seqno).\",\n  34: \"An even msg_seqno expected (irrelevant message), but odd received.\",\n  35: \"Odd msg_seqno expected (relevant message), but even received.\",\n  48: \"Incorrect server salt (in this case, the bad_server_salt response is received with \" + \"the correct salt, and the message is to be re-sent with it).\",\n  64: \"Invalid container.\"\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}