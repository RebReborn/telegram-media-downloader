{"ast":null,"code":"\"use strict\";\n\n/**\n * Errors not related to the Telegram API itself\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BadMessageError = exports.CdnFileTamperedError = exports.SecurityError = exports.InvalidBufferError = exports.InvalidChecksumError = exports.TypeNotFoundError = exports.ReadCancelledError = void 0;\n/**\n * Occurs when a read operation was cancelled.\n */\nclass ReadCancelledError extends Error {\n  constructor() {\n    super(\"The read operation was cancelled.\");\n  }\n}\nexports.ReadCancelledError = ReadCancelledError;\n/**\n * Occurs when a type is not found, for example,\n * when trying to read a TLObject with an invalid constructor code.\n */\nclass TypeNotFoundError extends Error {\n  constructor(invalidConstructorId, remaining) {\n    super(`Could not find a matching Constructor ID for the TLObject that was supposed to be\n        read with ID ${invalidConstructorId}. Most likely, a TLObject was trying to be read when\n         it should not be read. Remaining bytes: ${remaining.length}`);\n    if (typeof alert !== \"undefined\") {\n      alert(`Missing MTProto Entity: Please, make sure to add TL definition for ID ${invalidConstructorId}`);\n    }\n    this.invalidConstructorId = invalidConstructorId;\n    this.remaining = remaining;\n  }\n}\nexports.TypeNotFoundError = TypeNotFoundError;\n/**\n * Occurs when using the TCP full mode and the checksum of a received\n * packet doesn't match the expected checksum.\n */\nclass InvalidChecksumError extends Error {\n  constructor(checksum, validChecksum) {\n    super(`Invalid checksum (${checksum} when ${validChecksum} was expected). This packet should be skipped.`);\n    this.checksum = checksum;\n    this.validChecksum = validChecksum;\n  }\n}\nexports.InvalidChecksumError = InvalidChecksumError;\n/**\n * Occurs when the buffer is invalid, and may contain an HTTP error code.\n * For instance, 404 means \"forgotten/broken authorization key\", while\n */\nclass InvalidBufferError extends Error {\n  constructor(payload) {\n    let code = undefined;\n    if (payload.length === 4) {\n      code = -payload.readInt32LE(0);\n      super(`Invalid response buffer (HTTP code ${code})`);\n    } else {\n      super(`Invalid response buffer (too short ${payload})`);\n    }\n    this.code = code;\n    this.payload = payload;\n  }\n}\nexports.InvalidBufferError = InvalidBufferError;\n/**\n * Generic security error, mostly used when generating a new AuthKey.\n */\nclass SecurityError extends Error {\n  constructor(...args) {\n    if (!args.length) {\n      args = [\"A security check failed.\"];\n    }\n    super(...args);\n  }\n}\nexports.SecurityError = SecurityError;\n/**\n * Occurs when there's a hash mismatch between the decrypted CDN file\n * and its expected hash.\n */\nclass CdnFileTamperedError extends SecurityError {\n  constructor() {\n    super(\"The CDN file has been altered and its download cancelled.\");\n  }\n}\nexports.CdnFileTamperedError = CdnFileTamperedError;\n/**\n * Occurs when handling a badMessageNotification\n */\nclass BadMessageError extends Error {\n  constructor(request, code) {\n    let errorMessage = BadMessageError.ErrorMessages[code] || `Unknown error code (this should not happen): ${code}.`;\n    errorMessage += `  Caused by ${request.className}`;\n    super(errorMessage);\n    this.errorMessage = errorMessage;\n    this.code = code;\n  }\n}\nexports.BadMessageError = BadMessageError;\nBadMessageError.ErrorMessages = {\n  16: \"msg_id too low (most likely, client time is wrong it would be worthwhile to \" + \"synchronize it using msg_id notifications and re-send the original message \" + \"with the “correct” msg_id or wrap it in a container with a new msg_id if the \" + \"original message had waited too long on the client to be transmitted).\",\n  17: \"msg_id too high (similar to the previous case, the client time has to be \" + \"synchronized, and the message re-sent with the correct msg_id).\",\n  18: \"Incorrect two lower order msg_id bits (the server expects client message msg_id \" + \"to be divisible by 4).\",\n  19: \"Container msg_id is the same as msg_id of a previously received message \" + \"(this must never happen).\",\n  20: \"Message too old, and it cannot be verified whether the server has received a \" + \"message with this msg_id or not.\",\n  32: \"msg_seqno too low (the server has already received a message with a lower \" + \"msg_id but with either a higher or an equal and odd seqno).\",\n  33: \"msg_seqno too high (similarly, there is a message with a higher msg_id but with \" + \"either a lower or an equal and odd seqno).\",\n  34: \"An even msg_seqno expected (irrelevant message), but odd received.\",\n  35: \"Odd msg_seqno expected (relevant message), but even received.\",\n  48: \"Incorrect server salt (in this case, the bad_server_salt response is received with \" + \"the correct salt, and the message is to be re-sent with it).\",\n  64: \"Invalid container.\"\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","BadMessageError","CdnFileTamperedError","SecurityError","InvalidBufferError","InvalidChecksumError","TypeNotFoundError","ReadCancelledError","Error","constructor","invalidConstructorId","remaining","length","alert","checksum","validChecksum","payload","code","undefined","readInt32LE","args","request","errorMessage","ErrorMessages","className"],"sources":["C:/Users/Rodrick/Documents/telegram-media-downloader/node_modules/telegram/errors/Common.js"],"sourcesContent":["\"use strict\";\n/**\n * Errors not related to the Telegram API itself\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BadMessageError = exports.CdnFileTamperedError = exports.SecurityError = exports.InvalidBufferError = exports.InvalidChecksumError = exports.TypeNotFoundError = exports.ReadCancelledError = void 0;\n/**\n * Occurs when a read operation was cancelled.\n */\nclass ReadCancelledError extends Error {\n    constructor() {\n        super(\"The read operation was cancelled.\");\n    }\n}\nexports.ReadCancelledError = ReadCancelledError;\n/**\n * Occurs when a type is not found, for example,\n * when trying to read a TLObject with an invalid constructor code.\n */\nclass TypeNotFoundError extends Error {\n    constructor(invalidConstructorId, remaining) {\n        super(`Could not find a matching Constructor ID for the TLObject that was supposed to be\r\n        read with ID ${invalidConstructorId}. Most likely, a TLObject was trying to be read when\r\n         it should not be read. Remaining bytes: ${remaining.length}`);\n        if (typeof alert !== \"undefined\") {\n            alert(`Missing MTProto Entity: Please, make sure to add TL definition for ID ${invalidConstructorId}`);\n        }\n        this.invalidConstructorId = invalidConstructorId;\n        this.remaining = remaining;\n    }\n}\nexports.TypeNotFoundError = TypeNotFoundError;\n/**\n * Occurs when using the TCP full mode and the checksum of a received\n * packet doesn't match the expected checksum.\n */\nclass InvalidChecksumError extends Error {\n    constructor(checksum, validChecksum) {\n        super(`Invalid checksum (${checksum} when ${validChecksum} was expected). This packet should be skipped.`);\n        this.checksum = checksum;\n        this.validChecksum = validChecksum;\n    }\n}\nexports.InvalidChecksumError = InvalidChecksumError;\n/**\n * Occurs when the buffer is invalid, and may contain an HTTP error code.\n * For instance, 404 means \"forgotten/broken authorization key\", while\n */\nclass InvalidBufferError extends Error {\n    constructor(payload) {\n        let code = undefined;\n        if (payload.length === 4) {\n            code = -payload.readInt32LE(0);\n            super(`Invalid response buffer (HTTP code ${code})`);\n        }\n        else {\n            super(`Invalid response buffer (too short ${payload})`);\n        }\n        this.code = code;\n        this.payload = payload;\n    }\n}\nexports.InvalidBufferError = InvalidBufferError;\n/**\n * Generic security error, mostly used when generating a new AuthKey.\n */\nclass SecurityError extends Error {\n    constructor(...args) {\n        if (!args.length) {\n            args = [\"A security check failed.\"];\n        }\n        super(...args);\n    }\n}\nexports.SecurityError = SecurityError;\n/**\n * Occurs when there's a hash mismatch between the decrypted CDN file\n * and its expected hash.\n */\nclass CdnFileTamperedError extends SecurityError {\n    constructor() {\n        super(\"The CDN file has been altered and its download cancelled.\");\n    }\n}\nexports.CdnFileTamperedError = CdnFileTamperedError;\n/**\n * Occurs when handling a badMessageNotification\n */\nclass BadMessageError extends Error {\n    constructor(request, code) {\n        let errorMessage = BadMessageError.ErrorMessages[code] ||\n            `Unknown error code (this should not happen): ${code}.`;\n        errorMessage += `  Caused by ${request.className}`;\n        super(errorMessage);\n        this.errorMessage = errorMessage;\n        this.code = code;\n    }\n}\nexports.BadMessageError = BadMessageError;\nBadMessageError.ErrorMessages = {\n    16: \"msg_id too low (most likely, client time is wrong it would be worthwhile to \" +\n        \"synchronize it using msg_id notifications and re-send the original message \" +\n        \"with the “correct” msg_id or wrap it in a container with a new msg_id if the \" +\n        \"original message had waited too long on the client to be transmitted).\",\n    17: \"msg_id too high (similar to the previous case, the client time has to be \" +\n        \"synchronized, and the message re-sent with the correct msg_id).\",\n    18: \"Incorrect two lower order msg_id bits (the server expects client message msg_id \" +\n        \"to be divisible by 4).\",\n    19: \"Container msg_id is the same as msg_id of a previously received message \" +\n        \"(this must never happen).\",\n    20: \"Message too old, and it cannot be verified whether the server has received a \" +\n        \"message with this msg_id or not.\",\n    32: \"msg_seqno too low (the server has already received a message with a lower \" +\n        \"msg_id but with either a higher or an equal and odd seqno).\",\n    33: \"msg_seqno too high (similarly, there is a message with a higher msg_id but with \" +\n        \"either a lower or an equal and odd seqno).\",\n    34: \"An even msg_seqno expected (irrelevant message), but odd received.\",\n    35: \"Odd msg_seqno expected (relevant message), but even received.\",\n    48: \"Incorrect server salt (in this case, the bad_server_salt response is received with \" +\n        \"the correct salt, and the message is to be re-sent with it).\",\n    64: \"Invalid container.\",\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}