{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StoreSession = void 0;\nconst Memory_1 = require(\"./Memory\");\nconst store2_1 = __importDefault(require(\"store2\"));\nconst AuthKey_1 = require(\"../crypto/AuthKey\");\nclass StoreSession extends Memory_1.MemorySession {\n  constructor(sessionName, divider = \":\") {\n    super();\n    if (sessionName === \"session\") {\n      throw new Error(\"Session name can't be 'session'. Please use a different name.\");\n    }\n    if (typeof localStorage === \"undefined\" || localStorage === null) {\n      const LocalStorage = require(\"./localStorage\").LocalStorage;\n      this.store = store2_1.default.area(sessionName, new LocalStorage(\"./\" + sessionName));\n    } else {\n      this.store = store2_1.default.area(sessionName, localStorage);\n    }\n    if (divider == undefined) {\n      divider = \":\";\n    }\n    this.sessionName = sessionName + divider;\n  }\n  async load() {\n    let authKey = this.store.get(this.sessionName + \"authKey\");\n    if (authKey && typeof authKey === \"object\") {\n      this._authKey = new AuthKey_1.AuthKey();\n      if (\"data\" in authKey) {\n        authKey = Buffer.from(authKey.data);\n      }\n      await this._authKey.setKey(authKey);\n    }\n    const dcId = this.store.get(this.sessionName + \"dcId\");\n    if (dcId) {\n      this._dcId = dcId;\n    }\n    const port = this.store.get(this.sessionName + \"port\");\n    if (port) {\n      this._port = port;\n    }\n    const serverAddress = this.store.get(this.sessionName + \"serverAddress\");\n    if (serverAddress) {\n      this._serverAddress = serverAddress;\n    }\n  }\n  setDC(dcId, serverAddress, port) {\n    this.store.set(this.sessionName + \"dcId\", dcId);\n    this.store.set(this.sessionName + \"port\", port);\n    this.store.set(this.sessionName + \"serverAddress\", serverAddress);\n    super.setDC(dcId, serverAddress, port);\n  }\n  set authKey(value) {\n    this._authKey = value;\n    this.store.set(this.sessionName + \"authKey\", value === null || value === void 0 ? void 0 : value.getKey());\n  }\n  get authKey() {\n    return this._authKey;\n  }\n  processEntities(tlo) {\n    const rows = this._entitiesToRows(tlo);\n    if (!rows) {\n      return;\n    }\n    for (const row of rows) {\n      row.push(new Date().getTime().toString());\n      this.store.set(this.sessionName + row[0], row);\n    }\n  }\n  getEntityRowsById(id, exact = true) {\n    return this.store.get(this.sessionName + id.toString());\n  }\n}\nexports.StoreSession = StoreSession;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","StoreSession","Memory_1","require","store2_1","AuthKey_1","MemorySession","constructor","sessionName","divider","Error","localStorage","LocalStorage","store","default","area","undefined","load","authKey","get","_authKey","AuthKey","Buffer","from","data","setKey","dcId","_dcId","port","_port","serverAddress","_serverAddress","setDC","set","getKey","processEntities","tlo","rows","_entitiesToRows","row","push","Date","getTime","toString","getEntityRowsById","id","exact"],"sources":["C:/Users/Rodrick/Documents/telegram-media-downloader/node_modules/telegram/sessions/StoreSession.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StoreSession = void 0;\nconst Memory_1 = require(\"./Memory\");\nconst store2_1 = __importDefault(require(\"store2\"));\nconst AuthKey_1 = require(\"../crypto/AuthKey\");\nclass StoreSession extends Memory_1.MemorySession {\n    constructor(sessionName, divider = \":\") {\n        super();\n        if (sessionName === \"session\") {\n            throw new Error(\"Session name can't be 'session'. Please use a different name.\");\n        }\n        if (typeof localStorage === \"undefined\" || localStorage === null) {\n            const LocalStorage = require(\"./localStorage\").LocalStorage;\n            this.store = store2_1.default.area(sessionName, new LocalStorage(\"./\" + sessionName));\n        }\n        else {\n            this.store = store2_1.default.area(sessionName, localStorage);\n        }\n        if (divider == undefined) {\n            divider = \":\";\n        }\n        this.sessionName = sessionName + divider;\n    }\n    async load() {\n        let authKey = this.store.get(this.sessionName + \"authKey\");\n        if (authKey && typeof authKey === \"object\") {\n            this._authKey = new AuthKey_1.AuthKey();\n            if (\"data\" in authKey) {\n                authKey = Buffer.from(authKey.data);\n            }\n            await this._authKey.setKey(authKey);\n        }\n        const dcId = this.store.get(this.sessionName + \"dcId\");\n        if (dcId) {\n            this._dcId = dcId;\n        }\n        const port = this.store.get(this.sessionName + \"port\");\n        if (port) {\n            this._port = port;\n        }\n        const serverAddress = this.store.get(this.sessionName + \"serverAddress\");\n        if (serverAddress) {\n            this._serverAddress = serverAddress;\n        }\n    }\n    setDC(dcId, serverAddress, port) {\n        this.store.set(this.sessionName + \"dcId\", dcId);\n        this.store.set(this.sessionName + \"port\", port);\n        this.store.set(this.sessionName + \"serverAddress\", serverAddress);\n        super.setDC(dcId, serverAddress, port);\n    }\n    set authKey(value) {\n        this._authKey = value;\n        this.store.set(this.sessionName + \"authKey\", value === null || value === void 0 ? void 0 : value.getKey());\n    }\n    get authKey() {\n        return this._authKey;\n    }\n    processEntities(tlo) {\n        const rows = this._entitiesToRows(tlo);\n        if (!rows) {\n            return;\n        }\n        for (const row of rows) {\n            row.push(new Date().getTime().toString());\n            this.store.set(this.sessionName + row[0], row);\n        }\n    }\n    getEntityRowsById(id, exact = true) {\n        return this.store.get(this.sessionName + id.toString());\n    }\n}\nexports.StoreSession = StoreSession;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}