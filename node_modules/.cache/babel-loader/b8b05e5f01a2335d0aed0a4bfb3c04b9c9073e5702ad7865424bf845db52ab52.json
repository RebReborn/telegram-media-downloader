{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StoreSession = void 0;\nconst Memory_1 = require(\"./Memory\");\nconst store2_1 = __importDefault(require(\"store2\"));\nconst AuthKey_1 = require(\"../crypto/AuthKey\");\nclass StoreSession extends Memory_1.MemorySession {\n  constructor(sessionName, divider = \":\") {\n    super();\n    if (sessionName === \"session\") {\n      throw new Error(\"Session name can't be 'session'. Please use a different name.\");\n    }\n    if (typeof localStorage === \"undefined\" || localStorage === null) {\n      const LocalStorage = require(\"./localStorage\").LocalStorage;\n      this.store = store2_1.default.area(sessionName, new LocalStorage(\"./\" + sessionName));\n    } else {\n      this.store = store2_1.default.area(sessionName, localStorage);\n    }\n    if (divider == undefined) {\n      divider = \":\";\n    }\n    this.sessionName = sessionName + divider;\n  }\n  async load() {\n    let authKey = this.store.get(this.sessionName + \"authKey\");\n    if (authKey && typeof authKey === \"object\") {\n      this._authKey = new AuthKey_1.AuthKey();\n      if (\"data\" in authKey) {\n        authKey = Buffer.from(authKey.data);\n      }\n      await this._authKey.setKey(authKey);\n    }\n    const dcId = this.store.get(this.sessionName + \"dcId\");\n    if (dcId) {\n      this._dcId = dcId;\n    }\n    const port = this.store.get(this.sessionName + \"port\");\n    if (port) {\n      this._port = port;\n    }\n    const serverAddress = this.store.get(this.sessionName + \"serverAddress\");\n    if (serverAddress) {\n      this._serverAddress = serverAddress;\n    }\n  }\n  setDC(dcId, serverAddress, port) {\n    this.store.set(this.sessionName + \"dcId\", dcId);\n    this.store.set(this.sessionName + \"port\", port);\n    this.store.set(this.sessionName + \"serverAddress\", serverAddress);\n    super.setDC(dcId, serverAddress, port);\n  }\n  set authKey(value) {\n    this._authKey = value;\n    this.store.set(this.sessionName + \"authKey\", value === null || value === void 0 ? void 0 : value.getKey());\n  }\n  get authKey() {\n    return this._authKey;\n  }\n  processEntities(tlo) {\n    const rows = this._entitiesToRows(tlo);\n    if (!rows) {\n      return;\n    }\n    for (const row of rows) {\n      row.push(new Date().getTime().toString());\n      this.store.set(this.sessionName + row[0], row);\n    }\n  }\n  getEntityRowsById(id, exact = true) {\n    return this.store.get(this.sessionName + id.toString());\n  }\n}\nexports.StoreSession = StoreSession;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}