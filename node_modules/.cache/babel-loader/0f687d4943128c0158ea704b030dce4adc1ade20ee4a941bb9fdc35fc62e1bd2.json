{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MessageContainer = void 0;\nconst TLMessage_1 = require(\"./TLMessage\");\nclass MessageContainer {\n  constructor(messages) {\n    this.CONSTRUCTOR_ID = 0x73f1f8dc;\n    this.messages = messages;\n    this.classType = \"constructor\";\n  }\n  static async fromReader(reader) {\n    const messages = [];\n    const length = reader.readInt();\n    for (let x = 0; x < length; x++) {\n      const msgId = reader.readLong();\n      const seqNo = reader.readInt();\n      const length = reader.readInt();\n      const before = reader.tellPosition();\n      const obj = reader.tgReadObject();\n      reader.setPosition(before + length);\n      const tlMessage = new TLMessage_1.TLMessage(msgId, seqNo, obj);\n      messages.push(tlMessage);\n    }\n    return new MessageContainer(messages);\n  }\n}\nexports.MessageContainer = MessageContainer;\nMessageContainer.CONSTRUCTOR_ID = 0x73f1f8dc;\nMessageContainer.classType = \"constructor\";\n// Maximum size in bytes for the inner payload of the container.\n// Telegram will close the connection if the payload is bigger.\n// The overhead of the container itself is subtracted.\nMessageContainer.MAXIMUM_SIZE = 1044456 - 8;\n// Maximum amount of messages that can't be sent inside a single\n// container, inclusive. Beyond this limit Telegram will respond\n// with BAD_MESSAGE 64 (invalid container).\n//\n// This limit is not 100% accurate and may in some cases be higher.\n// However, sending up to 100 requests at once in a single container\n// is a reasonable conservative value, since it could also depend on\n// other factors like size per request, but we cannot know this.\nMessageContainer.MAXIMUM_LENGTH = 100;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}