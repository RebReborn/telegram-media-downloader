{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectionTCPFull = exports.FullPacketCodec = void 0;\nconst Connection_1 = require(\"./Connection\");\nconst Helpers_1 = require(\"../../Helpers\");\nconst errors_1 = require(\"../../errors\");\nclass FullPacketCodec extends Connection_1.PacketCodec {\n  constructor(connection) {\n    super(connection);\n    this._sendCounter = 0; // Telegram will ignore us otherwise\n  }\n  encodePacket(data) {\n    // https://core.telegram.org/mtproto#tcp-transport\n    // total length, sequence number, packet and checksum (CRC32)\n    const length = data.length + 12;\n    const e = Buffer.alloc(8);\n    e.writeInt32LE(length, 0);\n    e.writeInt32LE(this._sendCounter, 4);\n    data = Buffer.concat([e, data]);\n    const crc = Buffer.alloc(4);\n    crc.writeUInt32LE((0, Helpers_1.crc32)(data), 0);\n    this._sendCounter += 1;\n    return Buffer.concat([data, crc]);\n  }\n  /**\n   *\n   * @param reader {PromisedWebSockets}\n   * @returns {Promise<*>}\n   */\n  async readPacket(reader) {\n    const packetLenSeq = await reader.readExactly(8); // 4 and 4\n    if (packetLenSeq === undefined) {\n      // Return empty buffer in case of issue\n      return Buffer.alloc(0);\n    }\n    const packetLen = packetLenSeq.readInt32LE(0);\n    if (packetLen < 0) {\n      // # It has been observed that the length and seq can be -429,\n      // # followed by the body of 4 bytes also being -429.\n      // # See https://github.com/LonamiWebs/Telethon/issues/4042.\n      const body = await reader.readExactly(4);\n      throw new errors_1.InvalidBufferError(body);\n    }\n    let body = await reader.readExactly(packetLen - 8);\n    const checksum = body.slice(-4).readUInt32LE(0);\n    body = body.slice(0, -4);\n    const validChecksum = (0, Helpers_1.crc32)(Buffer.concat([packetLenSeq, body]));\n    if (!(validChecksum === checksum)) {\n      throw new errors_1.InvalidChecksumError(checksum, validChecksum);\n    }\n    return body;\n  }\n}\nexports.FullPacketCodec = FullPacketCodec;\nclass ConnectionTCPFull extends Connection_1.Connection {\n  constructor() {\n    super(...arguments);\n    this.PacketCodecClass = FullPacketCodec;\n  }\n}\nexports.ConnectionTCPFull = ConnectionTCPFull;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}