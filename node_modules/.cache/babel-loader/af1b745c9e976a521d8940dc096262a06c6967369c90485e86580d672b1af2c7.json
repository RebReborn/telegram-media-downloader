{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildReplyMarkup = buildReplyMarkup;\nconst tl_1 = require(\"../tl\");\nconst button_1 = require(\"../tl/custom/button\");\nconst messageButton_1 = require(\"../tl/custom/messageButton\");\nconst Helpers_1 = require(\"../Helpers\");\n// ButtonMethods\n/** @hidden */\nfunction buildReplyMarkup(buttons, inlineOnly = false) {\n  if (buttons == undefined) {\n    return undefined;\n  }\n  if (\"SUBCLASS_OF_ID\" in buttons) {\n    if (buttons.SUBCLASS_OF_ID == 0xe2e10ef2) {\n      return buttons;\n    }\n  }\n  if (!(0, Helpers_1.isArrayLike)(buttons)) {\n    buttons = [[buttons]];\n  } else if (!buttons || !(0, Helpers_1.isArrayLike)(buttons[0])) {\n    // @ts-ignore\n    buttons = [buttons];\n  }\n  let isInline = false;\n  let isNormal = false;\n  let resize = undefined;\n  const singleUse = false;\n  const selective = false;\n  const rows = [];\n  // @ts-ignore\n  for (const row of buttons) {\n    const current = [];\n    for (let button of row) {\n      if (button instanceof button_1.Button) {\n        if (button.resize != undefined) {\n          resize = button.resize;\n        }\n        if (button.singleUse != undefined) {\n          resize = button.singleUse;\n        }\n        if (button.selective != undefined) {\n          resize = button.selective;\n        }\n        button = button.button;\n      } else if (button instanceof messageButton_1.MessageButton) {\n        button = button.button;\n      }\n      const inline = button_1.Button._isInline(button);\n      if (!isInline && inline) {\n        isInline = true;\n      }\n      if (!isNormal && inline) {\n        isNormal = false;\n      }\n      if (button.SUBCLASS_OF_ID == 0xbad74a3) {\n        // 0xbad74a3 == crc32(b'KeyboardButton')\n        current.push(button);\n      }\n    }\n    if (current) {\n      rows.push(new tl_1.Api.KeyboardButtonRow({\n        buttons: current\n      }));\n    }\n  }\n  if (inlineOnly && isNormal) {\n    throw new Error(\"You cannot use non-inline buttons here\");\n  } else if (isInline === isNormal && isNormal) {\n    throw new Error(\"You cannot mix inline with normal buttons\");\n  } else if (isInline) {\n    return new tl_1.Api.ReplyInlineMarkup({\n      rows: rows\n    });\n  }\n  return new tl_1.Api.ReplyKeyboardMarkup({\n    rows: rows,\n    resize: resize,\n    singleUse: singleUse,\n    selective: selective\n  });\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}