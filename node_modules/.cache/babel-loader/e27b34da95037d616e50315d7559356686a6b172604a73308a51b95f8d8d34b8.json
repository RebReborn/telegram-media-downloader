{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectionTCPFull = exports.FullPacketCodec = void 0;\nconst Connection_1 = require(\"./Connection\");\nconst Helpers_1 = require(\"../../Helpers\");\nconst errors_1 = require(\"../../errors\");\nclass FullPacketCodec extends Connection_1.PacketCodec {\n  constructor(connection) {\n    super(connection);\n    this._sendCounter = 0; // Telegram will ignore us otherwise\n  }\n  encodePacket(data) {\n    // https://core.telegram.org/mtproto#tcp-transport\n    // total length, sequence number, packet and checksum (CRC32)\n    const length = data.length + 12;\n    const e = Buffer.alloc(8);\n    e.writeInt32LE(length, 0);\n    e.writeInt32LE(this._sendCounter, 4);\n    data = Buffer.concat([e, data]);\n    const crc = Buffer.alloc(4);\n    crc.writeUInt32LE((0, Helpers_1.crc32)(data), 0);\n    this._sendCounter += 1;\n    return Buffer.concat([data, crc]);\n  }\n  /**\n   *\n   * @param reader {PromisedWebSockets}\n   * @returns {Promise<*>}\n   */\n  async readPacket(reader) {\n    const packetLenSeq = await reader.readExactly(8); // 4 and 4\n    if (packetLenSeq === undefined) {\n      // Return empty buffer in case of issue\n      return Buffer.alloc(0);\n    }\n    const packetLen = packetLenSeq.readInt32LE(0);\n    if (packetLen < 0) {\n      // # It has been observed that the length and seq can be -429,\n      // # followed by the body of 4 bytes also being -429.\n      // # See https://github.com/LonamiWebs/Telethon/issues/4042.\n      const body = await reader.readExactly(4);\n      throw new errors_1.InvalidBufferError(body);\n    }\n    let body = await reader.readExactly(packetLen - 8);\n    const checksum = body.slice(-4).readUInt32LE(0);\n    body = body.slice(0, -4);\n    const validChecksum = (0, Helpers_1.crc32)(Buffer.concat([packetLenSeq, body]));\n    if (!(validChecksum === checksum)) {\n      throw new errors_1.InvalidChecksumError(checksum, validChecksum);\n    }\n    return body;\n  }\n}\nexports.FullPacketCodec = FullPacketCodec;\nclass ConnectionTCPFull extends Connection_1.Connection {\n  constructor() {\n    super(...arguments);\n    this.PacketCodecClass = FullPacketCodec;\n  }\n}\nexports.ConnectionTCPFull = ConnectionTCPFull;","map":{"version":3,"names":["Object","defineProperty","exports","value","ConnectionTCPFull","FullPacketCodec","Connection_1","require","Helpers_1","errors_1","PacketCodec","constructor","connection","_sendCounter","encodePacket","data","length","e","Buffer","alloc","writeInt32LE","concat","crc","writeUInt32LE","crc32","readPacket","reader","packetLenSeq","readExactly","undefined","packetLen","readInt32LE","body","InvalidBufferError","checksum","slice","readUInt32LE","validChecksum","InvalidChecksumError","Connection","arguments","PacketCodecClass"],"sources":["C:/Users/Rodrick/Documents/telegram-media-downloader/node_modules/telegram/network/connection/TCPFull.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConnectionTCPFull = exports.FullPacketCodec = void 0;\nconst Connection_1 = require(\"./Connection\");\nconst Helpers_1 = require(\"../../Helpers\");\nconst errors_1 = require(\"../../errors\");\nclass FullPacketCodec extends Connection_1.PacketCodec {\n    constructor(connection) {\n        super(connection);\n        this._sendCounter = 0; // Telegram will ignore us otherwise\n    }\n    encodePacket(data) {\n        // https://core.telegram.org/mtproto#tcp-transport\n        // total length, sequence number, packet and checksum (CRC32)\n        const length = data.length + 12;\n        const e = Buffer.alloc(8);\n        e.writeInt32LE(length, 0);\n        e.writeInt32LE(this._sendCounter, 4);\n        data = Buffer.concat([e, data]);\n        const crc = Buffer.alloc(4);\n        crc.writeUInt32LE((0, Helpers_1.crc32)(data), 0);\n        this._sendCounter += 1;\n        return Buffer.concat([data, crc]);\n    }\n    /**\n     *\n     * @param reader {PromisedWebSockets}\n     * @returns {Promise<*>}\n     */\n    async readPacket(reader) {\n        const packetLenSeq = await reader.readExactly(8); // 4 and 4\n        if (packetLenSeq === undefined) {\n            // Return empty buffer in case of issue\n            return Buffer.alloc(0);\n        }\n        const packetLen = packetLenSeq.readInt32LE(0);\n        if (packetLen < 0) {\n            // # It has been observed that the length and seq can be -429,\n            // # followed by the body of 4 bytes also being -429.\n            // # See https://github.com/LonamiWebs/Telethon/issues/4042.\n            const body = await reader.readExactly(4);\n            throw new errors_1.InvalidBufferError(body);\n        }\n        let body = await reader.readExactly(packetLen - 8);\n        const checksum = body.slice(-4).readUInt32LE(0);\n        body = body.slice(0, -4);\n        const validChecksum = (0, Helpers_1.crc32)(Buffer.concat([packetLenSeq, body]));\n        if (!(validChecksum === checksum)) {\n            throw new errors_1.InvalidChecksumError(checksum, validChecksum);\n        }\n        return body;\n    }\n}\nexports.FullPacketCodec = FullPacketCodec;\nclass ConnectionTCPFull extends Connection_1.Connection {\n    constructor() {\n        super(...arguments);\n        this.PacketCodecClass = FullPacketCodec;\n    }\n}\nexports.ConnectionTCPFull = ConnectionTCPFull;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}