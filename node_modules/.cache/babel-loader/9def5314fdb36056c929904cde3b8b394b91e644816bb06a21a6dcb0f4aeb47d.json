{"ast":null,"code":"\"use strict\";\n\n/*\n * Imported from https://github.com/spalt08/cryptography/blob/master/packages/aes/src/utils/words.ts\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.s2i = s2i;\nexports.getWords = getWords;\nexports.xor = xor;\nfunction s2i(str, pos) {\n  return str.charCodeAt(pos) << 24 ^ str.charCodeAt(pos + 1) << 16 ^ str.charCodeAt(pos + 2) << 8 ^ str.charCodeAt(pos + 3);\n}\n/**\n * Helper function for transforming string key to Uint32Array\n */\nfunction getWords(key) {\n  if (key instanceof Uint32Array) {\n    return key;\n  }\n  if (typeof key === \"string\") {\n    if (key.length % 4 !== 0) for (let i = key.length % 4; i <= 4; i++) key += \"\\0x00\";\n    const buf = new Uint32Array(key.length / 4);\n    for (let i = 0; i < key.length; i += 4) buf[i / 4] = s2i(key, i);\n    return buf;\n  }\n  if (key instanceof Uint8Array) {\n    const buf = new Uint32Array(key.length / 4);\n    for (let i = 0; i < key.length; i += 4) {\n      buf[i / 4] = key[i] << 24 ^ key[i + 1] << 16 ^ key[i + 2] << 8 ^ key[i + 3];\n    }\n    return buf;\n  }\n  throw new Error(\"Unable to create 32-bit words\");\n}\nfunction xor(left, right, to = left) {\n  for (let i = 0; i < left.length; i++) to[i] = left[i] ^ right[i];\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}