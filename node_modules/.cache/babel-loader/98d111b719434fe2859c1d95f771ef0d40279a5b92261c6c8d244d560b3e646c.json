{"ast":null,"code":"\"use strict\";\n\n// let _level: string | undefined = undefined;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Logger = exports.LogLevel = void 0;\nconst platform_1 = require(\"../platform\");\nvar LogLevel;\n(function (LogLevel) {\n  LogLevel[\"NONE\"] = \"none\";\n  LogLevel[\"ERROR\"] = \"error\";\n  LogLevel[\"WARN\"] = \"warn\";\n  LogLevel[\"INFO\"] = \"info\";\n  LogLevel[\"DEBUG\"] = \"debug\";\n})(LogLevel || (exports.LogLevel = LogLevel = {}));\nclass Logger {\n  constructor(level) {\n    this.levels = [\"error\", \"warn\", \"info\", \"debug\"];\n    // if (!_level) {\n    //     _level = level || \"info\"; // defaults to info\n    // }\n    this._logLevel = level || LogLevel.INFO;\n    this.isBrowser = !platform_1.isNode;\n    if (!this.isBrowser) {\n      this.colors = {\n        start: \"\\x1b[2m\",\n        warn: \"\\x1b[35m\",\n        info: \"\\x1b[33m\",\n        debug: \"\\x1b[36m\",\n        error: \"\\x1b[31m\",\n        end: \"\\x1b[0m\"\n      };\n    } else {\n      this.colors = {\n        start: \"%c\",\n        warn: \"color : #ff00ff\",\n        info: \"color : #ffff00\",\n        debug: \"color : #00ffff\",\n        error: \"color : #ff0000\",\n        end: \"\"\n      };\n    }\n    this.messageFormat = \"[%t] [%l] - [%m]\";\n    this.tzOffset = new Date().getTimezoneOffset() * 60000;\n  }\n  /**\n   *\n   * @param level {string}\n   * @returns {boolean}\n   */\n  canSend(level) {\n    return this._logLevel ? this.levels.indexOf(this._logLevel) >= this.levels.indexOf(level) : false;\n  }\n  /**\n   * @param message {string}\n   */\n  warn(message) {\n    this._log(LogLevel.WARN, message, this.colors.warn);\n  }\n  /**\n   * @param message {string}\n   */\n  info(message) {\n    this._log(LogLevel.INFO, message, this.colors.info);\n  }\n  /**\n   * @param message {string}\n   */\n  debug(message) {\n    this._log(LogLevel.DEBUG, message, this.colors.debug);\n  }\n  /**\n   * @param message {string}\n   */\n  error(message) {\n    this._log(LogLevel.ERROR, message, this.colors.error);\n  }\n  format(message, level) {\n    return this.messageFormat.replace(\"%t\", this.getDateTime()).replace(\"%l\", level.toUpperCase()).replace(\"%m\", message);\n  }\n  get logLevel() {\n    return this._logLevel;\n  }\n  setLevel(level) {\n    this._logLevel = level;\n  }\n  static setLevel(level) {\n    console.log(\"Logger.setLevel is deprecated, it will has no effect. Please, use client.setLogLevel instead.\");\n  }\n  /**\n   * @param level {string}\n   * @param message {string}\n   * @param color {string}\n   */\n  _log(level, message, color) {\n    if (this.canSend(level)) {\n      this.log(level, message, color);\n    } else {\n      return;\n    }\n  }\n  /**\n   * Override this function for custom Logger. <br />\n   *\n   * @remarks use `this.isBrowser` to check and handle for different environment.\n   * @param level {string}\n   * @param message {string}\n   * @param color {string}\n   */\n  log(level, message, color) {\n    if (!this.isBrowser) {\n      console.log(color + this.format(message, level) + this.colors.end);\n    } else {\n      console.log(this.colors.start + this.format(message, level), color);\n    }\n  }\n  getDateTime() {\n    return new Date(Date.now() - this.tzOffset).toISOString().slice(0, -1);\n  }\n}\nexports.Logger = Logger;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}