{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AuthKey = void 0;\nconst Helpers_1 = require(\"../Helpers\");\nconst extensions_1 = require(\"../extensions\");\nconst Helpers_2 = require(\"../Helpers\");\nclass AuthKey {\n  constructor(value, hash) {\n    if (!hash || !value) {\n      return;\n    }\n    this._key = value;\n    this._hash = hash;\n    const reader = new extensions_1.BinaryReader(hash);\n    this.auxHash = reader.readLong(false);\n    reader.read(4);\n    this.keyId = reader.readLong(false);\n  }\n  async setKey(value) {\n    if (!value) {\n      this._key = this.auxHash = this.keyId = this._hash = undefined;\n      return;\n    }\n    if (value instanceof AuthKey) {\n      this._key = value._key;\n      this.auxHash = value.auxHash;\n      this.keyId = value.keyId;\n      this._hash = value._hash;\n      return;\n    }\n    this._key = value;\n    this._hash = await (0, Helpers_1.sha1)(this._key);\n    const reader = new extensions_1.BinaryReader(this._hash);\n    this.auxHash = reader.readLong(false);\n    reader.read(4);\n    this.keyId = reader.readLong(false);\n  }\n  async waitForKey() {\n    while (!this.keyId) {\n      await (0, Helpers_2.sleep)(20);\n    }\n  }\n  getKey() {\n    return this._key;\n  }\n  // TODO : This doesn't really fit here, it's only used in authentication\n  /**\n   * Calculates the new nonce hash based on the current class fields' values\n   * @param newNonce\n   * @param number\n   * @returns {bigInt.BigInteger}\n   */\n  async calcNewNonceHash(newNonce, number) {\n    if (this.auxHash) {\n      const nonce = (0, Helpers_1.toSignedLittleBuffer)(newNonce, 32);\n      const n = Buffer.alloc(1);\n      n.writeUInt8(number, 0);\n      const data = Buffer.concat([nonce, Buffer.concat([n, (0, Helpers_1.readBufferFromBigInt)(this.auxHash, 8, true)])]);\n      // Calculates the message key from the given data\n      const shaData = (await (0, Helpers_1.sha1)(data)).slice(4, 20);\n      return (0, Helpers_1.readBigIntFromBuffer)(shaData, true, true);\n    }\n    throw new Error(\"Auth key not set\");\n  }\n  equals(other) {\n    var _a;\n    return other instanceof this.constructor && this._key && Buffer.isBuffer(other.getKey()) && ((_a = other.getKey()) === null || _a === void 0 ? void 0 : _a.equals(this._key));\n  }\n}\nexports.AuthKey = AuthKey;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}