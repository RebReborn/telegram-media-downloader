{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectionTCPMTProxyAbridged = exports.TCPMTProxy = void 0;\nconst Connection_1 = require(\"./Connection\");\nconst TCPAbridged_1 = require(\"./TCPAbridged\");\nconst Helpers_1 = require(\"../../Helpers\");\nconst CTR_1 = require(\"../../crypto/CTR\");\nclass MTProxyIO {\n  constructor(connection) {\n    this.header = undefined;\n    this.connection = connection.socket;\n    this._packetClass = connection.PacketCodecClass;\n    this._secret = connection._secret;\n    this._dcId = connection._dcId;\n  }\n  async initHeader() {\n    let secret = this._secret;\n    const isDD = secret.length == 17 && secret[0] == 0xdd;\n    secret = isDD ? secret.slice(1) : secret;\n    if (secret.length != 16) {\n      throw new Error(\"MTProxy secret must be a hex-string representing 16 bytes\");\n    }\n    const keywords = [Buffer.from(\"50567247\", \"hex\"), Buffer.from(\"474554\", \"hex\"), Buffer.from(\"504f5354\", \"hex\"), Buffer.from(\"eeeeeeee\", \"hex\")];\n    let random;\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      random = (0, Helpers_1.generateRandomBytes)(64);\n      if (random[0] !== 0xef && !random.slice(4, 8).equals(Buffer.alloc(4))) {\n        let ok = true;\n        for (const key of keywords) {\n          if (key.equals(random.slice(0, 4))) {\n            ok = false;\n            break;\n          }\n        }\n        if (ok) {\n          break;\n        }\n      }\n    }\n    random = random.toJSON().data;\n    const randomReversed = Buffer.from(random.slice(8, 56)).reverse();\n    // Encryption has \"continuous buffer\" enabled\n    const encryptKey = await (0, Helpers_1.sha256)(Buffer.concat([Buffer.from(random.slice(8, 40)), secret]));\n    const encryptIv = Buffer.from(random.slice(40, 56));\n    const decryptKey = await (0, Helpers_1.sha256)(Buffer.concat([Buffer.from(randomReversed.slice(0, 32)), secret]));\n    const decryptIv = Buffer.from(randomReversed.slice(32, 48));\n    const encryptor = new CTR_1.CTR(encryptKey, encryptIv);\n    const decryptor = new CTR_1.CTR(decryptKey, decryptIv);\n    random = Buffer.concat([Buffer.from(random.slice(0, 56)), this._packetClass.obfuscateTag, Buffer.from(random.slice(60))]);\n    const dcIdBytes = Buffer.alloc(2);\n    dcIdBytes.writeInt8(this._dcId, 0);\n    random = Buffer.concat([Buffer.from(random.slice(0, 60)), dcIdBytes, Buffer.from(random.slice(62))]);\n    random = Buffer.concat([Buffer.from(random.slice(0, 56)), Buffer.from(encryptor.encrypt(random).slice(56, 64)), Buffer.from(random.slice(64))]);\n    this.header = random;\n    this._encrypt = encryptor;\n    this._decrypt = decryptor;\n  }\n  async read(n) {\n    const data = await this.connection.readExactly(n);\n    return this._decrypt.encrypt(data);\n  }\n  write(data) {\n    this.connection.write(this._encrypt.encrypt(data));\n  }\n}\nclass TCPMTProxy extends Connection_1.ObfuscatedConnection {\n  constructor({\n    ip,\n    port,\n    dcId,\n    loggers,\n    proxy,\n    socket,\n    testServers\n  }) {\n    super({\n      ip: proxy.ip,\n      port: proxy.port,\n      dcId: dcId,\n      loggers: loggers,\n      socket: socket,\n      proxy: proxy,\n      testServers: testServers\n    });\n    this.ObfuscatedIO = MTProxyIO;\n    if (!(\"MTProxy\" in proxy)) {\n      throw new Error(\"This connection only supports MPTProxies\");\n    }\n    if (!proxy.secret) {\n      throw new Error(\"You need to provide the secret for the MTProxy\");\n    }\n    if (proxy.secret && proxy.secret.match(/^[0-9a-f]+$/i)) {\n      // probably hex\n      this._secret = Buffer.from(proxy.secret, \"hex\");\n    } else {\n      // probably b64\n      this._secret = Buffer.from(proxy.secret, \"base64\");\n    }\n  }\n}\nexports.TCPMTProxy = TCPMTProxy;\nclass ConnectionTCPMTProxyAbridged extends TCPMTProxy {\n  constructor() {\n    super(...arguments);\n    this.PacketCodecClass = TCPAbridged_1.AbridgedPacketCodec;\n  }\n}\nexports.ConnectionTCPMTProxyAbridged = ConnectionTCPMTProxyAbridged;","map":{"version":3,"names":["Object","defineProperty","exports","value","ConnectionTCPMTProxyAbridged","TCPMTProxy","Connection_1","require","TCPAbridged_1","Helpers_1","CTR_1","MTProxyIO","constructor","connection","header","undefined","socket","_packetClass","PacketCodecClass","_secret","_dcId","initHeader","secret","isDD","length","slice","Error","keywords","Buffer","from","random","generateRandomBytes","equals","alloc","ok","key","toJSON","data","randomReversed","reverse","encryptKey","sha256","concat","encryptIv","decryptKey","decryptIv","encryptor","CTR","decryptor","obfuscateTag","dcIdBytes","writeInt8","encrypt","_encrypt","_decrypt","read","n","readExactly","write","ObfuscatedConnection","ip","port","dcId","loggers","proxy","testServers","ObfuscatedIO","match","arguments","AbridgedPacketCodec"],"sources":["C:/Users/Rodrick/Documents/telegram-media-downloader/node_modules/telegram/network/connection/TCPMTProxy.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConnectionTCPMTProxyAbridged = exports.TCPMTProxy = void 0;\nconst Connection_1 = require(\"./Connection\");\nconst TCPAbridged_1 = require(\"./TCPAbridged\");\nconst Helpers_1 = require(\"../../Helpers\");\nconst CTR_1 = require(\"../../crypto/CTR\");\nclass MTProxyIO {\n    constructor(connection) {\n        this.header = undefined;\n        this.connection = connection.socket;\n        this._packetClass =\n            connection.PacketCodecClass;\n        this._secret = connection._secret;\n        this._dcId = connection._dcId;\n    }\n    async initHeader() {\n        let secret = this._secret;\n        const isDD = secret.length == 17 && secret[0] == 0xdd;\n        secret = isDD ? secret.slice(1) : secret;\n        if (secret.length != 16) {\n            throw new Error(\"MTProxy secret must be a hex-string representing 16 bytes\");\n        }\n        const keywords = [\n            Buffer.from(\"50567247\", \"hex\"),\n            Buffer.from(\"474554\", \"hex\"),\n            Buffer.from(\"504f5354\", \"hex\"),\n            Buffer.from(\"eeeeeeee\", \"hex\"),\n        ];\n        let random;\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            random = (0, Helpers_1.generateRandomBytes)(64);\n            if (random[0] !== 0xef &&\n                !random.slice(4, 8).equals(Buffer.alloc(4))) {\n                let ok = true;\n                for (const key of keywords) {\n                    if (key.equals(random.slice(0, 4))) {\n                        ok = false;\n                        break;\n                    }\n                }\n                if (ok) {\n                    break;\n                }\n            }\n        }\n        random = random.toJSON().data;\n        const randomReversed = Buffer.from(random.slice(8, 56)).reverse();\n        // Encryption has \"continuous buffer\" enabled\n        const encryptKey = await (0, Helpers_1.sha256)(Buffer.concat([Buffer.from(random.slice(8, 40)), secret]));\n        const encryptIv = Buffer.from(random.slice(40, 56));\n        const decryptKey = await (0, Helpers_1.sha256)(Buffer.concat([Buffer.from(randomReversed.slice(0, 32)), secret]));\n        const decryptIv = Buffer.from(randomReversed.slice(32, 48));\n        const encryptor = new CTR_1.CTR(encryptKey, encryptIv);\n        const decryptor = new CTR_1.CTR(decryptKey, decryptIv);\n        random = Buffer.concat([\n            Buffer.from(random.slice(0, 56)),\n            this._packetClass.obfuscateTag,\n            Buffer.from(random.slice(60)),\n        ]);\n        const dcIdBytes = Buffer.alloc(2);\n        dcIdBytes.writeInt8(this._dcId, 0);\n        random = Buffer.concat([\n            Buffer.from(random.slice(0, 60)),\n            dcIdBytes,\n            Buffer.from(random.slice(62)),\n        ]);\n        random = Buffer.concat([\n            Buffer.from(random.slice(0, 56)),\n            Buffer.from(encryptor.encrypt(random).slice(56, 64)),\n            Buffer.from(random.slice(64)),\n        ]);\n        this.header = random;\n        this._encrypt = encryptor;\n        this._decrypt = decryptor;\n    }\n    async read(n) {\n        const data = await this.connection.readExactly(n);\n        return this._decrypt.encrypt(data);\n    }\n    write(data) {\n        this.connection.write(this._encrypt.encrypt(data));\n    }\n}\nclass TCPMTProxy extends Connection_1.ObfuscatedConnection {\n    constructor({ ip, port, dcId, loggers, proxy, socket, testServers, }) {\n        super({\n            ip: proxy.ip,\n            port: proxy.port,\n            dcId: dcId,\n            loggers: loggers,\n            socket: socket,\n            proxy: proxy,\n            testServers: testServers,\n        });\n        this.ObfuscatedIO = MTProxyIO;\n        if (!(\"MTProxy\" in proxy)) {\n            throw new Error(\"This connection only supports MPTProxies\");\n        }\n        if (!proxy.secret) {\n            throw new Error(\"You need to provide the secret for the MTProxy\");\n        }\n        if (proxy.secret && proxy.secret.match(/^[0-9a-f]+$/i)) {\n            // probably hex\n            this._secret = Buffer.from(proxy.secret, \"hex\");\n        }\n        else {\n            // probably b64\n            this._secret = Buffer.from(proxy.secret, \"base64\");\n        }\n    }\n}\nexports.TCPMTProxy = TCPMTProxy;\nclass ConnectionTCPMTProxyAbridged extends TCPMTProxy {\n    constructor() {\n        super(...arguments);\n        this.PacketCodecClass = TCPAbridged_1.AbridgedPacketCodec;\n    }\n}\nexports.ConnectionTCPMTProxyAbridged = ConnectionTCPMTProxyAbridged;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}