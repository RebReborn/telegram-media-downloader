{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectionTCPObfuscated = void 0;\nconst Helpers_1 = require(\"../../Helpers\");\nconst Connection_1 = require(\"./Connection\");\nconst TCPAbridged_1 = require(\"./TCPAbridged\");\nconst CTR_1 = require(\"../../crypto/CTR\");\nclass ObfuscatedIO {\n  constructor(connection) {\n    this.header = undefined;\n    this.connection = connection.socket;\n    this._packetClass = connection.PacketCodecClass;\n  }\n  async initHeader() {\n    // Obfuscated messages secrets cannot start with any of these\n    const keywords = [Buffer.from(\"50567247\", \"hex\"), Buffer.from(\"474554\", \"hex\"), Buffer.from(\"504f5354\", \"hex\"), Buffer.from(\"eeeeeeee\", \"hex\")];\n    let random;\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      random = (0, Helpers_1.generateRandomBytes)(64);\n      if (random[0] !== 0xef && !random.slice(4, 8).equals(Buffer.alloc(4))) {\n        let ok = true;\n        for (const key of keywords) {\n          if (key.equals(random.slice(0, 4))) {\n            ok = false;\n            break;\n          }\n        }\n        if (ok) {\n          break;\n        }\n      }\n    }\n    random = random.toJSON().data;\n    const randomReversed = Buffer.from(random.slice(8, 56)).reverse();\n    // Encryption has \"continuous buffer\" enabled\n    const encryptKey = Buffer.from(random.slice(8, 40));\n    const encryptIv = Buffer.from(random.slice(40, 56));\n    const decryptKey = Buffer.from(randomReversed.slice(0, 32));\n    const decryptIv = Buffer.from(randomReversed.slice(32, 48));\n    const encryptor = new CTR_1.CTR(encryptKey, encryptIv);\n    const decryptor = new CTR_1.CTR(decryptKey, decryptIv);\n    random = Buffer.concat([Buffer.from(random.slice(0, 56)), this._packetClass.obfuscateTag, Buffer.from(random.slice(60))]);\n    random = Buffer.concat([Buffer.from(random.slice(0, 56)), Buffer.from(encryptor.encrypt(random).slice(56, 64)), Buffer.from(random.slice(64))]);\n    this.header = random;\n    this._encrypt = encryptor;\n    this._decrypt = decryptor;\n  }\n  async read(n) {\n    const data = await this.connection.readExactly(n);\n    return this._decrypt.encrypt(data);\n  }\n  write(data) {\n    this.connection.write(this._encrypt.encrypt(data));\n  }\n}\nclass ConnectionTCPObfuscated extends Connection_1.ObfuscatedConnection {\n  constructor() {\n    super(...arguments);\n    this.ObfuscatedIO = ObfuscatedIO;\n    this.PacketCodecClass = TCPAbridged_1.AbridgedPacketCodec;\n  }\n}\nexports.ConnectionTCPObfuscated = ConnectionTCPObfuscated;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}