{"ast":null,"code":"var _jsxFileName = \"/workspaces/telegram-media-downloader/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { TelegramClient } from 'telegram';\nimport { StringSession } from 'telegram/sessions';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [tab, setTab] = useState('auth');\n  const [apiId, setApiId] = useState('');\n  const [apiHash, setApiHash] = useState('');\n  const [phone, setPhone] = useState('');\n  const [code, setCode] = useState('');\n  const [client, setClient] = useState(null);\n  const [authStatus, setAuthStatus] = useState({\n    text: '',\n    type: ''\n  });\n  const [mediaItems, setMediaItems] = useState([]);\n  const [progress, setProgress] = useState(0);\n  const [chatInput, setChatInput] = useState('');\n  const [isWaitingForCode, setIsWaitingForCode] = useState(false);\n  const [isDownloading, setIsDownloading] = useState(false);\n  const verificationResolver = useRef(null);\n  useEffect(() => {\n    return () => {\n      verificationResolver.current = null;\n    };\n  }, []);\n\n  // Authentication\n  const connect = async () => {\n    try {\n      if (!apiId.match(/^\\d+$/)) throw new Error('API ID must be numeric');\n      if (!apiHash.match(/^[a-f0-9]{32}$/i)) throw new Error('Invalid API Hash format');\n      if (!phone.match(/^\\+?\\d{10,15}$/)) throw new Error('Invalid phone number');\n      setAuthStatus({\n        text: 'Connecting...',\n        type: 'loading'\n      });\n      setIsWaitingForCode(false);\n      setCode('');\n      const sessionKey = 'telegramSession';\n      const savedSession = localStorage.getItem(sessionKey) || '';\n      const newClient = new TelegramClient(new StringSession(savedSession), parseInt(apiId), apiHash, {\n        connectionRetries: 3\n      });\n      await newClient.start({\n        phoneNumber: phone,\n        phoneCode: async () => {\n          setAuthStatus({\n            text: 'Enter verification code',\n            type: 'info'\n          });\n          setIsWaitingForCode(true);\n          return new Promise(resolve => {\n            verificationResolver.current = resolve;\n          });\n        },\n        onError: err => {\n          setAuthStatus({\n            text: `Error: ${err.message}`,\n            type: 'error'\n          });\n          setIsWaitingForCode(false);\n        }\n      });\n      const session = newClient.session.save();\n      localStorage.setItem(sessionKey, session);\n      setClient(newClient);\n      setAuthStatus({\n        text: 'Connected successfully!',\n        type: 'success'\n      });\n      setTab('download');\n    } catch (err) {\n      setAuthStatus({\n        text: `Error: ${err.message}`,\n        type: 'error'\n      });\n      setIsWaitingForCode(false);\n    }\n  };\n  const verifyCode = () => {\n    if (!code.trim()) {\n      setAuthStatus({\n        text: 'Please enter verification code',\n        type: 'error'\n      });\n      return;\n    }\n    if (verificationResolver.current) {\n      setAuthStatus({\n        text: 'Verifying...',\n        type: 'loading'\n      });\n      verificationResolver.current(code);\n      verificationResolver.current = null;\n      setIsWaitingForCode(false);\n    } else {\n      setAuthStatus({\n        text: 'Verification failed. Try reconnecting.',\n        type: 'error'\n      });\n    }\n  };\n\n  // Fetch Media from Chat\n  const fetchMedia = async () => {\n    if (!client || !chatInput.trim()) {\n      setAuthStatus({\n        text: 'Please connect and enter a chat ID/username',\n        type: 'error'\n      });\n      return;\n    }\n    setIsDownloading(true);\n    setAuthStatus({\n      text: 'Fetching media...',\n      type: 'loading'\n    });\n    try {\n      const chat = await client.getEntity(chatInput);\n      const messages = await client.getMessages(chat, {\n        limit: 100\n      }); // Fetch last 100 messages\n      const mediaList = messages.filter(msg => msg.media).map(msg => {\n        var _msg$media$photo, _msg$media$document, _msg$media$document2, _msg$media$document2$, _msg$media$document2$2;\n        return {\n          id: msg.id,\n          type: msg.media.className,\n          fileReference: ((_msg$media$photo = msg.media.photo) === null || _msg$media$photo === void 0 ? void 0 : _msg$media$photo.fileReference) || ((_msg$media$document = msg.media.document) === null || _msg$media$document === void 0 ? void 0 : _msg$media$document.fileReference),\n          fileName: ((_msg$media$document2 = msg.media.document) === null || _msg$media$document2 === void 0 ? void 0 : (_msg$media$document2$ = _msg$media$document2.attributes) === null || _msg$media$document2$ === void 0 ? void 0 : (_msg$media$document2$2 = _msg$media$document2$.find(attr => attr.fileName)) === null || _msg$media$document2$2 === void 0 ? void 0 : _msg$media$document2$2.fileName) || `media_${msg.id}`\n        };\n      });\n      setMediaItems(mediaList);\n      setAuthStatus({\n        text: 'Media fetched successfully!',\n        type: 'success'\n      });\n    } catch (err) {\n      setAuthStatus({\n        text: `Error fetching media: ${err.message}`,\n        type: 'error'\n      });\n    } finally {\n      setIsDownloading(false);\n    }\n  };\n\n  // Download Media File\n  const downloadMedia = async media => {\n    if (!client) return;\n    setIsDownloading(true);\n    setAuthStatus({\n      text: `Downloading ${media.fileName}...`,\n      type: 'loading'\n    });\n    try {\n      const buffer = await client.downloadMedia(media, {\n        progressCallback: (received, total) => {\n          setProgress(Math.round(received / total * 100));\n        }\n      });\n      const blob = new Blob([buffer]);\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = media.fileName;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n      setAuthStatus({\n        text: `${media.fileName} downloaded!`,\n        type: 'success'\n      });\n    } catch (err) {\n      setAuthStatus({\n        text: `Download error: ${err.message}`,\n        type: 'error'\n      });\n    } finally {\n      setIsDownloading(false);\n      setProgress(0);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tabs\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setTab('auth'),\n        disabled: !client,\n        children: \"Authentication\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setTab('download'),\n        disabled: !client,\n        children: \"Download Media\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tab-content\",\n      children: [tab === 'auth' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auth-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Telegram Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"API ID\",\n          value: apiId,\n          onChange: e => setApiId(e.target.value.trim()),\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"API Hash\",\n          value: apiHash,\n          onChange: e => setApiHash(e.target.value.trim()),\n          type: \"password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Phone (+1234567890)\",\n          value: phone,\n          onChange: e => setPhone(e.target.value.trim()),\n          type: \"tel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: connect,\n          className: \"connect-btn\",\n          children: \"Connect to Telegram\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 25\n        }, this), isWaitingForCode && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"verification-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            placeholder: \"Verification Code\",\n            value: code,\n            onChange: e => setCode(e.target.value.trim()),\n            type: \"text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: verifyCode,\n            className: \"verify-btn\",\n            disabled: !code.trim(),\n            children: \"Verify Code\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 29\n        }, this), authStatus.text && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `status ${authStatus.type}`,\n          children: authStatus.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 21\n      }, this), tab === 'download' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"download-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Download Media\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Chat ID or Username (e.g., @username)\",\n          value: chatInput,\n          onChange: e => setChatInput(e.target.value.trim()),\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: fetchMedia,\n          disabled: isDownloading,\n          children: \"Fetch Media\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 25\n        }, this), mediaItems.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: mediaItems.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [item.fileName, \" (\", item.type, \")\", /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => downloadMedia(item),\n              disabled: isDownloading,\n              children: \"Download\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 41\n            }, this)]\n          }, item.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 37\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 29\n        }, this), progress > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Download Progress: \", progress, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 42\n        }, this), authStatus.text && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `status ${authStatus.type}`,\n          children: authStatus.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"zVBm1UwuP6D6XadT+pDzxIpzlng=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","TelegramClient","StringSession","jsxDEV","_jsxDEV","App","_s","tab","setTab","apiId","setApiId","apiHash","setApiHash","phone","setPhone","code","setCode","client","setClient","authStatus","setAuthStatus","text","type","mediaItems","setMediaItems","progress","setProgress","chatInput","setChatInput","isWaitingForCode","setIsWaitingForCode","isDownloading","setIsDownloading","verificationResolver","current","connect","match","Error","sessionKey","savedSession","localStorage","getItem","newClient","parseInt","connectionRetries","start","phoneNumber","phoneCode","Promise","resolve","onError","err","message","session","save","setItem","verifyCode","trim","fetchMedia","chat","getEntity","messages","getMessages","limit","mediaList","filter","msg","media","map","_msg$media$photo","_msg$media$document","_msg$media$document2","_msg$media$document2$","_msg$media$document2$2","id","className","fileReference","photo","document","fileName","attributes","find","attr","downloadMedia","buffer","progressCallback","received","total","Math","round","blob","Blob","url","window","URL","createObjectURL","link","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","children","onClick","disabled","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","length","item","_c","$RefreshReg$"],"sources":["/workspaces/telegram-media-downloader/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { TelegramClient } from 'telegram';\nimport { StringSession } from 'telegram/sessions';\nimport './App.css';\n\nfunction App() {\n    const [tab, setTab] = useState('auth');\n    const [apiId, setApiId] = useState('');\n    const [apiHash, setApiHash] = useState('');\n    const [phone, setPhone] = useState('');\n    const [code, setCode] = useState('');\n    const [client, setClient] = useState(null);\n    const [authStatus, setAuthStatus] = useState({ text: '', type: '' });\n    const [mediaItems, setMediaItems] = useState([]);\n    const [progress, setProgress] = useState(0);\n    const [chatInput, setChatInput] = useState('');\n    const [isWaitingForCode, setIsWaitingForCode] = useState(false);\n    const [isDownloading, setIsDownloading] = useState(false);\n    const verificationResolver = useRef(null);\n\n    useEffect(() => {\n        return () => {\n            verificationResolver.current = null;\n        };\n    }, []);\n\n    // Authentication\n    const connect = async () => {\n        try {\n            if (!apiId.match(/^\\d+$/)) throw new Error('API ID must be numeric');\n            if (!apiHash.match(/^[a-f0-9]{32}$/i)) throw new Error('Invalid API Hash format');\n            if (!phone.match(/^\\+?\\d{10,15}$/)) throw new Error('Invalid phone number');\n\n            setAuthStatus({ text: 'Connecting...', type: 'loading' });\n            setIsWaitingForCode(false);\n            setCode('');\n\n            const sessionKey = 'telegramSession';\n            const savedSession = localStorage.getItem(sessionKey) || '';\n            const newClient = new TelegramClient(\n                new StringSession(savedSession),\n                parseInt(apiId),\n                apiHash,\n                { connectionRetries: 3 }\n            );\n\n            await newClient.start({\n                phoneNumber: phone,\n                phoneCode: async () => {\n                    setAuthStatus({ text: 'Enter verification code', type: 'info' });\n                    setIsWaitingForCode(true);\n                    return new Promise((resolve) => {\n                        verificationResolver.current = resolve;\n                    });\n                },\n                onError: (err) => {\n                    setAuthStatus({ text: `Error: ${err.message}`, type: 'error' });\n                    setIsWaitingForCode(false);\n                },\n            });\n\n            const session = newClient.session.save();\n            localStorage.setItem(sessionKey, session);\n            setClient(newClient);\n            setAuthStatus({ text: 'Connected successfully!', type: 'success' });\n            setTab('download');\n        } catch (err) {\n            setAuthStatus({ text: `Error: ${err.message}`, type: 'error' });\n            setIsWaitingForCode(false);\n        }\n    };\n\n    const verifyCode = () => {\n        if (!code.trim()) {\n            setAuthStatus({ text: 'Please enter verification code', type: 'error' });\n            return;\n        }\n        if (verificationResolver.current) {\n            setAuthStatus({ text: 'Verifying...', type: 'loading' });\n            verificationResolver.current(code);\n            verificationResolver.current = null;\n            setIsWaitingForCode(false);\n        } else {\n            setAuthStatus({ text: 'Verification failed. Try reconnecting.', type: 'error' });\n        }\n    };\n\n    // Fetch Media from Chat\n    const fetchMedia = async () => {\n        if (!client || !chatInput.trim()) {\n            setAuthStatus({ text: 'Please connect and enter a chat ID/username', type: 'error' });\n            return;\n        }\n        setIsDownloading(true);\n        setAuthStatus({ text: 'Fetching media...', type: 'loading' });\n        try {\n            const chat = await client.getEntity(chatInput);\n            const messages = await client.getMessages(chat, { limit: 100 }); // Fetch last 100 messages\n            const mediaList = messages\n                .filter((msg) => msg.media)\n                .map((msg) => ({\n                    id: msg.id,\n                    type: msg.media.className,\n                    fileReference: msg.media.photo?.fileReference || msg.media.document?.fileReference,\n                    fileName: msg.media.document?.attributes?.find(attr => attr.fileName)?.fileName || `media_${msg.id}`,\n                }));\n            setMediaItems(mediaList);\n            setAuthStatus({ text: 'Media fetched successfully!', type: 'success' });\n        } catch (err) {\n            setAuthStatus({ text: `Error fetching media: ${err.message}`, type: 'error' });\n        } finally {\n            setIsDownloading(false);\n        }\n    };\n\n    // Download Media File\n    const downloadMedia = async (media) => {\n        if (!client) return;\n        setIsDownloading(true);\n        setAuthStatus({ text: `Downloading ${media.fileName}...`, type: 'loading' });\n        try {\n            const buffer = await client.downloadMedia(media, {\n                progressCallback: (received, total) => {\n                    setProgress(Math.round((received / total) * 100));\n                },\n            });\n            const blob = new Blob([buffer]);\n            const url = window.URL.createObjectURL(blob);\n            const link = document.createElement('a');\n            link.href = url;\n            link.download = media.fileName;\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n            window.URL.revokeObjectURL(url);\n            setAuthStatus({ text: `${media.fileName} downloaded!`, type: 'success' });\n        } catch (err) {\n            setAuthStatus({ text: `Download error: ${err.message}`, type: 'error' });\n        } finally {\n            setIsDownloading(false);\n            setProgress(0);\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <div className=\"tabs\">\n                <button onClick={() => setTab('auth')} disabled={!client}>Authentication</button>\n                <button onClick={() => setTab('download')} disabled={!client}>Download Media</button>\n            </div>\n            <div className=\"tab-content\">\n                {tab === 'auth' && (\n                    <div className=\"auth-container\">\n                        <h2>Telegram Login</h2>\n                        <input\n                            placeholder=\"API ID\"\n                            value={apiId}\n                            onChange={(e) => setApiId(e.target.value.trim())}\n                            type=\"text\"\n                        />\n                        <input\n                            placeholder=\"API Hash\"\n                            value={apiHash}\n                            onChange={(e) => setApiHash(e.target.value.trim())}\n                            type=\"password\"\n                        />\n                        <input\n                            placeholder=\"Phone (+1234567890)\"\n                            value={phone}\n                            onChange={(e) => setPhone(e.target.value.trim())}\n                            type=\"tel\"\n                        />\n                        <button onClick={connect} className=\"connect-btn\">Connect to Telegram</button>\n                        {isWaitingForCode && (\n                            <div className=\"verification-box\">\n                                <input\n                                    placeholder=\"Verification Code\"\n                                    value={code}\n                                    onChange={(e) => setCode(e.target.value.trim())}\n                                    type=\"text\"\n                                />\n                                <button\n                                    onClick={verifyCode}\n                                    className=\"verify-btn\"\n                                    disabled={!code.trim()}\n                                >\n                                    Verify Code\n                                </button>\n                            </div>\n                        )}\n                        {authStatus.text && (\n                            <div className={`status ${authStatus.type}`}>{authStatus.text}</div>\n                        )}\n                    </div>\n                )}\n                {tab === 'download' && (\n                    <div className=\"download-container\">\n                        <h2>Download Media</h2>\n                        <input\n                            placeholder=\"Chat ID or Username (e.g., @username)\"\n                            value={chatInput}\n                            onChange={(e) => setChatInput(e.target.value.trim())}\n                            type=\"text\"\n                        />\n                        <button onClick={fetchMedia} disabled={isDownloading}>\n                            Fetch Media\n                        </button>\n                        {mediaItems.length > 0 && (\n                            <ul>\n                                {mediaItems.map((item) => (\n                                    <li key={item.id}>\n                                        {item.fileName} ({item.type})\n                                        <button\n                                            onClick={() => downloadMedia(item)}\n                                            disabled={isDownloading}\n                                        >\n                                            Download\n                                        </button>\n                                    </li>\n                                ))}\n                            </ul>\n                        )}\n                        {progress > 0 && <div>Download Progress: {progress}%</div>}\n                        {authStatus.text && (\n                            <div className={`status ${authStatus.type}`}>{authStatus.text}</div>\n                        )}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}